{
    meta: {
        language: "C"
        description: "The C Programming Language"
        source.file.extension: [ ".c", ".h" ]
        source.source.package.specification.file.extension: ".h"
        source.source.package.implementation.file.extension: ".c"
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.math
        neos.math.universal
        neos.string
        neos.io
    ]

    packages: [
        Standard
    ]

    expect: comment
    expect: identifier

    @.unmatched: {
        ' ': whitespace
        character.LF: whitespace
        character.CR: whitespace
        character.TAB: whitespace
        character.EOF: whitespace
        '/': {
            '*': comment
        }
    }

    whitespace: {
        is: language.whitespace
        @: {
            ' ': whitespace
            character.LF: whitespace
            character.CR: whitespace
            character.TAB: whitespace
            character.EOF: whitespace
        }
    }

    comment: {
        is: language.comment
        @: {
            '*': {
                '/': done
                transform: comment    
            }
            character: comment
        }
    }

    type: {
        is: language.type
        char: {
            is: language.type.i8
        }
        short: {
            is: language.type.i16
        }
        int: {
            is: language.type.i32
        }
        long: {
            is: language.type.i32
        }
        long_long: {
            is: language.type.i64
        }
    }

    keyword: {
        @: {
            character.alpha: keyword
            whitespace: done
        }
        "char": type.char
        "short": type.short
        "int": type.int
        "long": type.long
        type.long: {
            type.long: {
                transform.previous: type.long_long
                discard: this
            }
        }
    }

    identifier: {
        is: language.identifier
        @: {
            character.alpha: identifier
            character.digit: identifier
            character.underscore: identifier
            whitespace: done
        }
    }

    block: {
        expect: declaration
        expect: statement
    }

    declaration: {
        expect: language.type
    }
}