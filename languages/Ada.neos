***** THIS FILE NEEDS UPDATING TO USE neosBNF.

{
    meta: {
        language: "Ada"
        description: "Ada (initially a subset of standard Ada, standard/scope TBD)"
        source.file.extension: [ ".ads", ".adb", ".ada" ]
        source.package.specification.file.extension: ".ads"
        source.package.implementation.file.extension: [ ".adb", ".ada" ]
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.math
        neos.math.universal
        neos.string
        neos.io
    ]

    packages: [
        Standard
    ]

    whitespace: {
        is: language.whitespace
        @: {
            ' ': ignore
            '\n': ignore
            '\r': ignore
            '\t': ignore
            default: next
        }
    }

    comment: {
        is: language.comment
        @: {
            "--": {
                '\n': drain
                default: ignore
            }
        }
    }

    expect: whitespace
    expect: comment
    expect: keyword.with
    expect: keyword.use
    expect: keyword.package

    @: {
        whitespace: ignore
        comment: ignore
        keyword.with: done
        keyword.use: done
        keyword.package: done
    }

    keyword: {
        as: language.keyword
        @: {
            "with": with
            "use": use
            "package": package
            "body": body
            "is": keyword.is
            "procedure": procedure
            "function": function
            "type": type
            "private": private
            "begin": begin
            "end": end
            "for": for
            "loop": loop
            "while": while
            "return": return
            "pragma": pragma
            language.keyword: {
                expect: none
                character.alpha: error
                character.underscore: error
                character.digit: error
                default: next
            }
            whitespace: ignore
        }
        using: { is: language.keyword }
        with: { is: language.keyword }
        use: { is: language.keyword }
        package: { is: language.keyword }
        body: { is: language.keyword }
        keyword.is: { is: language.keyword }
        procedure: { is: language.keyword }
        function: { is: language.keyword }
        type: { is: language.keyword }
        private: { is: language.keyword }
        begin: { is: language.keyword }
        end: { is: language.keyword }
        for: { is: language.keyword }
        loop: { is: language.keyword }
        while: { is: language.keyword }
        return: { is: language.keyword }
        pragma: { is: language.keyword }
    }

    procedure.prototype: {
        is: language.procedure.prototype
        identifier: language.procedure.name
        language.procedure.name: {
            expect: arguments
            arguments: {
                expect: statement.end
                statement.end: done
            }
            expect: statement.end
            statement.end: done
        }
    }

    procedure: {
        is: language.procedure
        identifier: language.procedure.name
        language.procedure.name: {
            expect: arguments
            expect: keyword.is
            arguments: {
                expect: keyword.is
            }
        }
        keyword.is: {
            begin: language.scope.open
        }
        language.scope.open: {
            end: language.scope.close
        }
    }

    procedure.main: {
        is: procedure
        is: language.procedure.main
    }

    enumerator: {
        is: language.enum.enumarator
    }

    enumerators: {
        is: language.enum.enumerators
        item: {
            is: enumerator
            expect: itentifier
            expect: character.literal
            met: {
                is: enumerator
                @: {
                    whitespace: whitespace
                    ',': item
                    ')': {
                        expect: statement.end
                    }
                }
                statement.end: done
            }
        }
    }

    type.definition: {
        is: language.type
        expect: identifier  
        identifier: language.type.name
        language.type.name: {
            expect: keyword.is
            keyword.is: {
                @: {
                    '(': enumerator_list
                }
            }
            enumerator_list: {
                transform.parent.parent: language.enum
                expect: enumerators
            }
        }
    }

    package: {
        identifier: source.package.name
        source.package.name: {
            keyword.is: {
                expect: package.specification
            }
        }
        body: {
            identifier: source.package.name
            source.package.name: {
                keyword.is: {
                    expect: package.body
                }
            }
        }
    }

    package.specification: {
        is: source.package.specification
        @: {
            type: type.definition
            procedure: language.error.not_implemented
            function: language.error.not_implemented
            private: language.error.not_implemented
            end: {
                identifier: source.package.name
            }
        }
        source.package.name: {
            equals: parent.source.package.name
            expect: statement.end
            statement.end: done
        }
    }

    package.body: {
        is: source.package.body
        @: {
            procedure: language.error.not_implemented
            function: language.error.not_implemented
            begin: package.initialization
        }
        package.initialization: {
            @: {
                end: {
                    identifier: source.package.name
                }
            }
            source.package.name: {
                equals: parent.parent.source.package.name
                expect: statement.end
                statement.end: done
            }
        }
    }

    arguments: {
        is: language.argument.list
        @: {
            whitespace: whitespace
            '(': item
        }
        item: {
            expect: identifier
            expect: expression
            met: {
                is: language.argument
                @: {
                    whitespace: whitespace
                    ',': item
                    ')': done
                }
            }
        }
    }

    statement.end: {
        @: {
            whitespace: whitespace
            ';': done
        }
    }

    pragma: {
        is: language.pragma
        language.identifier: {
            "Import": Import
            "Export": Export
        }
        Import: {
            expect: arguments
            language.identifier: {
                "neos": language.external.function.import
            }
            language.external.function.import: {
                language.identifier: language.function.name
            }
            language.function.name: {
                string.literal: language.external.function.name
            }
            language.external.function.name: done
        }
        Export: {
            is: language.error.not_implemented
        }
    }

    with: {
        expect: source.package.name
        @: {
            whitespace: whitespace
            ';': source.package.import
        }
    }

    use: {
        expect: source.package.name
        @: {
            whitespace: whitespace
            ';': language.scope.add.package
        }
    }

    identifier: {
        is: language.identifier
        @: {
            character.alpha: identifier
            character.digit: identifier
            character.underscore: identifier
            whitespace: done
        }
    }

    universal_number: {
        is: math.universal.number
        @: {
            digit: {
                digit: continue
                '.': point
                point: {
                    '.': error
                    digit: continue
                    'e': exponent
                    'E': exponent
                    default: next
                }
                default: next
            }
            '#': base
            base: {
                hexdigit: continue
                '.': point
                point: {
                    '.': error
                    hexdigit: continue
                    '#': {
                        'e': exponent
                        'E': exponent
                        default: next
                    }
                    default: next
                }
                '#': {
                    'e': exponent
                    'E': exponent
                    default: next
                }
            }
            exponent: {
                expect: '+'
                expect: '-'
                '+': exponent.positive
                exponent.positive: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
                '-': exponent.negative
                exponent.negative: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
            }
        }
    }

}