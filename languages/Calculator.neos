(* a simple expression evaluator (calculator) language schema in neosBNF *)
(* neosBNF describes both the syntax and the semantics of a programming language *)
(* semantic concepts are tagged in the schema using the $ construct *)

(* schema metadata *)
%{
    meta: {
        language: "Calculator"
        description: "A simple expression evaluator language (for neos testing purposes)"
        language.file.extension: [ ".calc" ]
        copyright: "Copyright (C) 2024 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math.universal
    ]
}%

(* tokenisation stage *)
#{
    whitespace $ language.whitespace ::= { ' ' | '\n' | '\r' | '\t' } ;
    character ::= U+000000 .. U+10FFFF ;
    exponent ::= ("e" | "E") , [ "+" | "-" ] , digit sequence ;
    digit sequence ::= digit , { digit } ;
    digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
}#

(* parsing stage *)
*{
    program $ language.program ::= whitespace , statement , whitespace ;
    statement $ language.statement ::= { expression , whitespace , ";" } ;
    expression $ math.expression ::= term , whitespace, { ( "+" $ math.operator.add | "-" $ math.operator.subtract ) , whitespace , term } ;
    term ::= factor , whitespace, { ( "*" $ math.operator.multiply | "/" $ math.operator.divide ) , whitespace, factor } ;
    factor ::= [ "-" $ math.operator.negate ] , whitespace , primary ;
    primary ::= "(" , whitespace , expression , whitespace , ")" | number ;
    number $ math.universal.number ::= digit sequence , [ '.' , digit sequence , [ exponent ] ]
}*