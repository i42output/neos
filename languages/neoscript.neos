%{
    meta: {
        language: "neoscript"
        description: "Default neoGFX scripting language"
        source.file.extension: ".neo"
        source.package.specification.file.extension: ".neo"
        source.package.implementation.file.extension: ".neo"
        copyright: "Copyright (C) 2024 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math.universal
    ]
}%

|{
    character literal ::= 
        ( '\'' , ( ' ' .. '\xFF' - ( '\\' | '\"' | '\'' ) | escaped character ) $ string.utf8.character, '\'' ) ;
    escaped character $ string.utf8.character.LF ::= ( "\\n" ) ;
    escaped character $ string.utf8.character.CR ::= ( "\\r" ) ;
    escaped character $ string.utf8.character.tab ::= ( "\\t" ) ;
    escaped character $ string.utf8.character.doublequote ::= ( "\\\"" ) ;
    escaped character $ string.utf8.character.singlequote::= ( "\\\'" ) ;
    escaped character $ string.utf8.character.backslash ::= ( "\\\\" ) ;
    string literal ::= 
        ( '\"' , { ( ' ' .. '\xFF' - ( '\\' | '\"' | '\'' ) | escaped character ) $ string.utf8.character } $ string.utf8 , '\"' ) ;

    using $ language.keyword ::= "using" ;
    import $ language.keyword ::= "import" ;
    namespace $ language.keyword ::= "namespace" ;
    public $ language.keyowrd ::= "public" ;
    protected $ language.keyowrd ::= "protected" ;
    private $ language.keyowrd ::= "private" ;
    override $ lanugage.keyword ::= "override" ;
    final $ language.keyword ::= "final" ;
    mutable $ language.keyword ::= "mutable" ;
    is $ language.keyword ::= "is" ;
    extends $ language.keyword ::= "extends" ;
    implements $ language.keyword ::= "implements" ;
    struct $ language.keyword ::= "struct" ;
    class $ language.keyword ::= "class" ;
    interface $ language.keyword ::= "interface" ;
    auto $ language.type.auto ::= "auto" ;
    def $ language.keyword ::= "def" ;
    fn $ language.keyword ::= "fn" ;
    proc $ language.keyword ::= "proc" ;
    in $ language.keyword $ language.function.parameter.in ::= "in" ;
    out $ language.keyword $ language.function.parameter.out ::= "out" ;
    inout $ language.keyword $ language.function.parameter.inout ::= "inout" ;
    if $ language.keyword ::= "if" ;
    else $ language.keyword ::= "else" ;
    for $ language.keyword ::= "for" ;
    while $ language.keyword ::= "while" ;
    do $ language.keyword ::= "do" ;
    return $ language.keyword ::= "return" ;

    number $ math.universal.number ::= 
        digit sequence , [ '.' , digit sequence , [ ("e" | "E") , [ "+" | "-" ] , digit sequence ] ]
    digit sequence ::= 
        digit , { digit } ;
    digit ::= 
        "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

    isize $ language.type.object.size.signed ::= "isize" ;
    usize $ language.type.object.size.unsigned ::= "usize" ;
    bool $ language.type.boolean ::= "bool" ;
    i8 $ language.type.i8 ::= "i8" ;
    u8 $ language.type.u8 ::= "u8" ;
    i16 $ language.type.i16 ::= "i16" ;
    u16 $ language.type.u16 ::= "u16" ;
    i32 $ language.type.i32 ::= "i32" ;
    u32 $ language.type.u32 ::= "u32" ;
    i64 $ language.type.i64 ::= "i64" ;
    u64 $ language.type.u64 ::= "u64" ;
    float $ language.type.float ::= "float" ;
    double $ language.type.double ::= "double" ;
    character $ language.type.character ::= "char" ;
    object $ language.gc.type.object ::= identifier ;

    true $ language.object.boolean.true ::= "true" ;
    false $ language.object.boolean.false ::= "false" ;

    package name $ source.package.name ::= alpha , { alpha | "." , alpha } ; 

    identifier ::= ( alpha ) , { alphanumeric | '_' } ;

    alpha ::= "A" .. "Z" | "a" .. "z" ;
    alphanumeric ::= alpha | "0" .. "9" ;

    open expression ::= "(" ;
    close expression ::= ")" ;
    open scope ::= "{" ;
    close scope ::= "}" ;
    comma ::= "," ;
    colon ::= ":" ;
    semicolon ::= ";" ;
    
    assign ::= "=" ;

    not ::= "!" ;
    or ::= "||" ;
    and ::= "&&" ;

    equal ::= "==" ;
    notequal ::= "!=" ;
    lessthan ::= "<" ;
    greaterthan ::= ">" ;
    lessthanorequal ::= "<=" ;
    greaterthanorequal ::= ">=" ;

    plus ::= "+" ;
    minus ::= "-" ;
    multiply ::= "*" ;
    divide ::= "/" ;

    comment $ language.comment $ language.whitespace ::= "--" , { character - '\n' }, ( '\n' | ? eof ? ) ;
    whitespace $ language.whitespace ::= { ' ' | '\n' | '\r' | '\t' | ? eof ? } ;
}| - ( comment , whitespace )

program $ language.program ::= { using directive | import directive | namespace scope } ;
using directive $ source.package.import ::= ( using , ( identifier | package name ) ) ;
import directive $ language.function.import ::= ( import , fn , fn sig ) ;
import directive $ language.function.import ::= ( import , proc , proc sig ) ;

namespace scope $ language.namespace.scope ::= 
    { comment | function | procedure | namespace def }
namespace def $ language.namespace ::= 
    identifier $ language.namespace.name , open scope , namespace scope , close scope ;

function $ language.function ::= ( fn , fn sig , fn body ) ;
procedure $ language.function ::= ( proc , proc sig , proc locals , proc body ) ;
fn sig $ language.function.signature ::= ( identifier , open expression , fn parameters , close expression , "->", type ) ;
proc sig $ language.function.signature ::= ( identifier , open expression , proc parameters , close expression ) ;
fn parameters $ language.function.parameters ::= ( fn parameter block , { semicolon , fn parameter block } ) ;
proc parameters $ language.function.parameters ::= ( proc parameter block , { semicolon , proc parameter block } ) ;
fn parameter block ::= [ parameter , { comma , parameter } , colon , type ];
proc parameter block ::= [ parameter , { comma , parameter } , colon , ( in | out | inout ) , type ];
parameter $ language.function.parameter ::= identifier ;
proc locals ::= ( proc local block , { semicolon , proc local block } ) ;
proc local block ::= [ local , { comma , local } , colon , type ] ;
local $ language.function.local ::= identifier ;
fn body $ language.function.body ::= scope ;
proc body $ language.function.body ::= scope ;
scope $ language.function.scope ::= ( open scope , { statement } , close scope ) ; 

statement $ language.statement ::= 
    expression | assignment | return statement | if statement | for loop | while loop | do while loop;

assignment $ language.assignment ::= 
    ( object , assign , expression );

expression $ language.expression ::= 
    function call | boolean expression | numeric expression ;

function call $ language.expression.call ::= 
    identifier , open expression , arguments , close expression ;

arguments ::= [ expression , { comma , expression } ] ;

boolean expression $ language.expression.boolean ::= 
      boolean term , { or , boolean term } $ boolean.logic.operator.or ;
boolean term ::= 
      boolean factor , { and , boolean factor } $ boolean.logic.operator.and ;
boolean factor ::= 
      true 
    | false 
    | ( not , boolean factor ) $ boolean.logic.operator.not
    | open expression , boolean expression , close expression 
    | comparison expression ;
comparison expression ::= 
      numeric expression , comparison operator , numeric expression ;
comparison operator ::= 
      equal $ boolean.operator.relational.equal ;
    | notequal $ boolean.operator.relational.notequal ;
    | lessthan $ boolean.operator.relational.lessthan ;
    | greaterthan $ boolean.operator.relational.greaterthan ;
    | lessthanorequal $ boolean.operator.relational.lessthanorequal ;
    | greaterthanorequal $ boolean.operator.relational.greaterthanorequal ;

numeric expression $ math.expression ::= 
    term, { ( plus $ math.operator.add | minus $ math.operator.subtract ) , term } ;
term ::= 
    factor, { ( multiply $ math.operator.multiply | divide $ math.operator.divide ), factor } ;
factor ::= 
    [ minus $ math.operator.negate ] , primary ;
primary ::= 
    open expression , expression , close expression | number ;

return statement $ language.statement.return ::= 
    ( return , expression ) ;

if statement $ language.statement.if ::= 
    if , open expression , boolean expression , close expression , ( scope | statement ) $ logic.operator.if , [ else statement ] ;
else statement $ language.statement.else ::= 
    else, ( scope | statement ) $ logic.operator.else ;

for loop $ language.statement.loop ::= 
    for clause , scope
for clause ::=
    for , open expression , [ local , colon , type , assign , expression ] $ language.assignment ,
    semicolon, boolean expression , semicolon , ( expression | assignment ) , close expression ;

while loop $ language.statement.loop ::= 
    while clause , scope
while clause ::=
    while , open expression , boolean expression , close expression ;

do while loop $ language.statement.loop ::= 
    do, scope, while clause

type ::= bool | i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | float | double | character | string | object ;

