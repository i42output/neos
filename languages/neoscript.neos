%{
    meta: {
        language: "neoscript"
        description: "Default neoGFX scripting language"
        source.file.extension: ".neo"
        source.package.specification.file.extension: ".neo"
        source.package.implementation.file.extension: ".neo"
        copyright: "Copyright (C) 2024 Leigh Johnston"
        version: "1.0.0"
    }

    stages: {
        tokenizer : {
            text : [ "#{" "}#" ]
        }
        parser : {
            text : [ "${" "}$" ]
            root : program
        }
    }

    pipeline: [
        tokenizer
        parser
    ]

    libraries: [
        neos.core
        neos.math.universal
    ]

    discard: [ 
        whitespace
        comment
        WS
    ]

    infix: [
        math.operator.add
        math.operator.subtract
        math.operator.multiply
        math.operator.divide
    ]
}%

#{
    character literal ::= 
        ( '\'' , ( ( ' ' .. '\xFF' - ( '\\' | '\"' | '\'' ) ) | escaped character ) $ string.utf8.character, '\'' ) ;
    string literal ::= 
        { '\"' , { ( ( ' ' .. '\xFF' - ( '\\' | '\"' | '\'' ) ) | escaped character ) } $ string.utf8 , '\"' , [ whitespace ] } + ;
    escaped character $ string.utf8.character.LF ::= "\\n" ;
    escaped character $ string.utf8.character.CR ::= "\\r" ;
    escaped character $ string.utf8.character.tab ::= "\\t" ;
    escaped character $ string.utf8.character.singlequote ::= "\\\'" ;
    escaped character $ string.utf8.character.doublequote ::= "\\\"" ;
    escaped character $ string.utf8.character.backslash ::= "\\\\" ;

    using $ language.keyword ::= potential keyword ::= "using" ;
    import $ language.keyword ::= potential keyword ::= "import" ;
    namespace $ language.keyword ::= potential keyword ::= "namespace" ;
    public $ language.keyword ::= potential keyword ::= "public" ;
    protected $ language.keyword ::= potential keyword ::= "protected" ;
    private $ language.keyword ::= potential keyword ::= "private" ;
    override $ language.keyword ::= potential keyword ::= "override" ;
    final $ language.keyword ::= potential keyword ::= "final" ;
    mutable $ language.keyword ::= potential keyword ::= "mutable" ;
    is $ language.keyword ::= potential keyword ::= "is" ;
    extends $ language.keyword ::= potential keyword ::= "extends" ;
    implements $ language.keyword ::= potential keyword ::= "implements" ;
    struct $ language.keyword ::= potential keyword ::= "struct" ;
    class $ language.keyword ::= potential keyword ::= "class" ;
    interface $ language.keyword ::= potential keyword ::= "interface" ;
    auto $ language.type.auto ::= potential keyword ::= "auto" ;
    def $ language.keyword ::= potential keyword ::= "def" ;
    fn $ language.keyword ::= potential keyword ::= "fn" ;
    proc $ language.keyword ::= potential keyword ::= "proc" ;
    in $ language.keyword $ language.function.parameter.in ::= potential keyword ::= "in" ;
    out $ language.keyword $ language.function.parameter.out ::= potential keyword ::= "out" ;
    inout $ language.keyword $ language.function.parameter.inout ::= potential keyword ::= "inout" ;
    if $ language.keyword ::= potential keyword ::= "if" ;
    else $ language.keyword ::= potential keyword ::= "else" ;
    for $ language.keyword ::= potential keyword ::= "for" ;
    while $ language.keyword ::= potential keyword ::= "while" ;
    do $ language.keyword ::= potential keyword ::= "do" ;
    return $ language.keyword ::= potential keyword ::= "return" ;

    positive integer ::= 
        digit sequence ;
    positive real ::= 
        digit sequence , '.' , digit sequence , [ ( "e" | "E" ) , [ "+" | "-" ] , digit sequence ] ;
    digit sequence ::= 
        digit , { digit } ;
    digit ::= 
        "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

    isize $ language.type.object.size.signed ::= potential keyword ::= "isize" ;
    usize $ language.type.object.size.unsigned ::= potential keyword ::= "usize" ;
    bool $ language.type.boolean ::= potential keyword ::= "bool" ;
    i8 $ language.type.i8 ::= potential keyword ::= "i8" ;
    u8 $ language.type.u8 ::= potential keyword ::= "u8" ;
    i16 $ language.type.i16 ::= potential keyword ::= "i16" ;
    u16 $ language.type.u16 ::= potential keyword ::= "u16" ;
    i32 $ language.type.i32 ::= potential keyword ::= "i32" ;
    u32 $ language.type.u32 ::= potential keyword ::= "u32" ;
    i64 $ language.type.i64 ::= potential keyword ::= "i64" ;
    u64 $ language.type.u64 ::= potential keyword ::= "u64" ;
    float $ language.type.float ::= potential keyword ::= "float" ;
    double $ language.type.double ::= potential keyword ::= "double" ;
    character $ language.type.character ::= potential keyword ::= "char" ;
    string $ language.type.string ::= potential keyword ::= "string" ;

    true $ language.object.boolean.true ::= potential keyword ::= "true" ;
    false $ language.object.boolean.false ::= potential keyword ::= "false" ;

    qualified identifier ::= { namespace name , namespace separator } + , identifier ;
    identifier $ language.identifier ::= alpha , { alphanumeric | '_' } ;
    namespace name $ language.namespace.name ::= alpha , { alphanumeric | '_' } ;
    package name ::= alpha , { alpha | ( "." , alpha ) } ; 
    potential keyword ::= { alphanumeric } + ;

    alpha ::= 'A' .. 'Z' | 'a' .. 'z' ;
    alphanumeric ::= alpha | '0' .. '9' ;

    open expression ::= "(" ;
    close expression ::= ")" ;
    open scope ::= "{" ;
    close scope ::= "}" ;
    comma ::= "," ;
    colon ::= ":" ;
    semicolon ::= ";" ;
    arrow ::= "->" ; 
    namespace separator ::= "::" ;
    
    assign ::= "=" ;

    not ::= "!" ;
    or ::= "||" ;
    and ::= "&&" ;

    equal ::= "==" ;
    notequal ::= "!=" ;
    lessthan ::= "<" ;
    greaterthan ::= ">" ;
    lessthanorequal ::= "<=" ;
    greaterthanorequal ::= ">=" ;

    plus ::= "+" ;
    minus ::= "-" ;
    multiply ::= "*" ;
    divide ::= "/" ;

    comment $ language.comment ::= "//" , { ! '\n' .. '\n' } , ( '\n' | ? eof ? ) ;
    whitespace $ language.whitespace ::= { ' ' | '\n' | '\r' | '\t' | comment | ? eof ? } + ;
}#

${
    program $ language.program ::= { WS , ( using directive | import directive | namespace scope ) , WS } ;
    using directive $ source.package.import ::= ( using , WS , ( identifier | package name ) $ source.package.name , WS , semicolon ) ;
    import directive $ language.function.import ::= ( import , WS , fn , WS , fn sig , WS , semicolon ) ;
    import directive $ language.function.import ::= ( import , WS , proc , WS , proc sig , WS , semicolon ) ;

    namespace scope ::= 
        { ( comment | function | procedure | namespace def | import directive ) , WS } ;
    namespace def $ language.namespace ::= 
        namespace , WS , ( identifier | namespace name ) $ language.namespace.name , WS , open scope $ language.namespace.scope.open , WS , namespace scope , WS , close scope $ language.namespace.scope.close ;

    function $ language.function ::= ( fn , WS , fn sig , WS , fn body ) ;
    procedure $ language.function ::= ( proc , WS , proc sig , WS , proc locals , WS , proc body ) ;
    fn sig $ language.function.signature ::= ( identifier $ language.function.name , WS , open expression , WS , fn parameters , WS , close expression , WS , arrow , WS , type $ language.function.return.type ) ;
    proc sig $ language.function.signature ::= ( identifier $ language.function.name , WS , open expression , WS , proc parameters , WS , close expression ) ;
    fn parameters $ language.function.parameters ::= [ fn parameter block , { WS , semicolon , WS , fn parameter block } ] ;
    proc parameters $ language.function.parameters ::= [ proc parameter block , { WS , semicolon , WS , proc parameter block } ] ;
    fn parameter block ::= [ parameter , { WS , comma , WS , parameter } , WS , colon , WS , type ] ;
    proc parameter block ::= [ parameter , { WS , comma , WS , parameter } , WS , colon , WS , ( in | out | inout ) , WS , type ] ;
    parameter $ language.function.parameter ::= identifier ;
    proc locals ::= ( proc local block , { WS , semicolon , WS , proc local block } ) ;
    proc local block ::= [ local , { WS , comma , WS , local } , WS , colon , WS , type ] ;
    local $ language.function.local ::= identifier ;
    fn body $ language.function.body ::= scope ;
    proc body $ language.function.body ::= scope ;
    scope $ language.function.scope ::= ( open scope $ language.scope.open , { WS , statement } , WS , close scope  $ language.scope.close ) ; 

    statement $ language.statement ::= 
        ( initialize , WS , semicolon ) | ( assignment , WS , semicolon ) | ( expression , WS , semicolon ) | return statement | if statement | for loop | while loop | do while loop ;

    initialize $ language.initialize ::= 
        ( type , WS , identifier , WS , assign , WS , expression ) ;

    assignment $ language.assignment ::= 
        ( identifier , WS , assign , WS , expression ) ;

    expression $ language.expression ::= 
        function call | numeric expression | boolean expression ;

    function call $ language.function.call ::= 
        ( identifier | qualified identifier ) $ language.function.name , WS , open expression , WS , arguments , WS , close expression ;

    arguments ::= [ expression , { WS , comma , WS , expression } ] ;

    boolean expression $ boolean.expression ::= 
          boolean term , { WS , or , WS , boolean term } $ boolean.logic.operator.or ;
    boolean term ::= 
          boolean factor , { WS , and , WS , boolean factor } $ boolean.logic.operator.and ;
    boolean factor ::= 
          true 
        | false 
        | ( not , WS , boolean factor ) $ boolean.logic.operator.not
        | ( open expression , WS , boolean expression , WS , close expression )
        | comparison expression ;
    comparison expression ::= 
          numeric expression , WS , comparison operator , WS , numeric expression ;
    comparison operator ::= 
          equal $ boolean.operator.relational.equal
        | notequal $ boolean.operator.relational.notequal
        | lessthan $ boolean.operator.relational.lessthan
        | greaterthan $ boolean.operator.relational.greaterthan
        | lessthanorequal $ boolean.operator.relational.lessthanorequal
        | greaterthanorequal $ boolean.operator.relational.greaterthanorequal ;

    numeric expression $ math.expression ::= 
        term , { WS , ( plus $ math.operator.add | minus $ math.operator.subtract ) , WS , term } ;
    term ::= 
        factor , { WS , ( multiply $ math.operator.multiply | divide $ math.operator.divide ) , WS , factor } ;
    factor ::= 
        primary / ( minus $ math.operator.negate , WS , ( function call | numeric expression ) ) ;
    primary ::= 
        ( open expression , WS , expression , WS , close expression ) | math operand ;
    math operand $ math.expression.operand ::= function call | number | identifier | character literal | string literal ;

    return statement $ language.function.return ::= 
        ( return , WS , expression , WS , semicolon ) ;

    if statement $ language.statement.if ::= 
        if , ( WS , open expression , WS , boolean expression , WS , close expression , WS , ( scope | statement ) ) $ logic.operator.if , { WS , else if statement } , [ WS , else statement ] ;
    else if statement $ language.statement.elseif ::= 
        else if , ( WS , open expression , WS , boolean expression , WS , close expression , WS , ( scope | statement ) ) $ logic.operator.elseif ;
    else statement $ language.statement.else ::= 
        else , WS , ( scope | statement ) $ logic.operator.else ;

    for loop $ language.statement.loop ::= 
        for clause , WS , scope ;
    for clause ::=
        for , WS , open expression , WS , [ local , WS , colon , WS , type , WS , assign , WS , expression ] $ language.assignment , WS ,
        semicolon , WS , boolean expression , WS , semicolon , WS , ( expression | assignment ) , WS , close expression ;

    while loop $ language.statement.loop ::= 
        while clause , WS , scope ;
    while clause ::=
        while , WS , open expression , WS , boolean expression , WS , close expression ;

    do while loop $ language.statement.loop ::= 
        do , WS , scope, WS , while clause ;

    number $ math.universal.integer ::= ( minus , positive integer ) | positive integer ;
    number $ math.universal.real ::= ( minus , positive real ) | positive real ;

    type ::= bool | i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | float | double | character | string | object ;

    WS ::= [ whitespace ] ;
}$
