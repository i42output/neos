%{
    meta: {
        language: "neoscript"
        description: "Default neoGFX scripting language"
        source.file.extension: ".neo"
        source.package.specification.file.extension: ".neo"
        source.package.implementation.file.extension: ".neo"
        copyright: "Copyright (C) 2024 Leigh Johnston"
        version: "1.0.0"
    }

    stages: {
        tokenizer : [ "#{" "}#" ]
        parser : [ "*{" "}*" ]
    }

    libraries: [
        neos.core
        neos.math.universal
    ]

    discard: [ 
        language.whitespace 
        language.comment
    ]

    infix: [
        math.operator.add
        math.operator.subtract
        math.operator.multiply
        math.operator.divide
    ]
}%

#{
    character literal ::= 
        ( '\'' , ( ' ' .. '\xFF' - ( '\\' | '\"' | '\'' ) | escaped character ) $ string.utf8.character, '\'' ) ;
    escaped character $ string.utf8.character.LF ::= ( "\\n" ) ;
    escaped character $ string.utf8.character.CR ::= ( "\\r" ) ;
    escaped character $ string.utf8.character.tab ::= ( "\\t" ) ;
    escaped character $ string.utf8.character.doublequote ::= ( "\\\"" ) ;
    escaped character $ string.utf8.character.singlequote::= ( "\\\'" ) ;
    escaped character $ string.utf8.character.backslash ::= ( "\\\\" ) ;
    string literal ::= 
        ( '\"' , { ( ' ' .. '\xFF' - ( '\\' | '\"' | '\'' ) | escaped character ) $ string.utf8.character } $ string.utf8 , '\"' ) ;

    using $ language.keyword ::= sep , "using" , sep ;
    import $ language.keyword ::= sep , "import" , sep ;
    namespace $ language.keyword ::= sep , "namespace" , sep ;
    public $ language.keyword ::= sep , "public" , sep ;
    protected $ language.keyword ::= sep , "protected" , sep ;
    private $ language.keyword ::= sep , "private" , sep ;
    override $ language.keyword ::= sep , "override" , sep ;
    final $ language.keyword ::= sep , "final" , sep ;
    mutable $ language.keyword ::= sep , "mutable" , sep ;
    is $ language.keyword ::= sep , "is" , sep ;
    extends $ language.keyword ::= sep , "extends" , sep ;
    implements $ language.keyword ::= sep , "implements" , sep ;
    struct $ language.keyword ::= sep , "struct" , sep ;
    class $ language.keyword ::= sep , "class" , sep ;
    interface $ language.keyword ::= sep , "interface" , sep ;
    auto $ language.type.auto ::= sep , "auto" , sep ;
    def $ language.keyword ::= sep , "def" , sep ;
    fn $ language.keyword ::= sep , "fn" , sep ;
    proc $ language.keyword ::= sep , "proc" , sep ;
    in $ language.keyword $ language.function.parameter.in ::= sep , "in" , sep ;
    out $ language.keyword $ language.function.parameter.out ::= sep , "out" , sep ;
    inout $ language.keyword $ language.function.parameter.inout ::= sep , "inout" , sep ;
    if $ language.keyword ::= sep , "if" , sep ;
    else $ language.keyword ::= sep , "else" , sep ;
    for $ language.keyword ::= sep , "for" , sep ;
    while $ language.keyword ::= sep , "while" , sep ;
    do $ language.keyword ::= sep , "do" , sep ;
    return $ language.keyword ::= sep , "return", sep ;

    number $ math.universal.number ::= 
        digit sequence , [ '.' , digit sequence , [ ("e" | "E") , [ "+" | "-" ] , digit sequence ] ]
    digit sequence ::= 
        digit , { digit } ;
    digit ::= 
        "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

    isize $ language.type.object.size.signed ::= sep , "isize" , sep ;
    usize $ language.type.object.size.unsigned ::= sep , "usize" , sep ;
    bool $ language.type.boolean ::= sep , "bool" , sep ;
    i8 $ language.type.i8 ::= sep , "i8" , sep ;
    u8 $ language.type.u8 ::= sep , "u8" , sep ;
    i16 $ language.type.i16 ::= sep , "i16" , sep ;
    u16 $ language.type.u16 ::= sep , "u16" , sep ;
    i32 $ language.type.i32 ::= sep , "i32" , sep ;
    u32 $ language.type.u32 ::= sep , "u32" , sep ;
    i64 $ language.type.i64 ::= sep , "i64" , sep ;
    u64 $ language.type.u64 ::= sep , "u64" , sep ;
    float $ language.type.float ::= sep , "float" , sep ;
    double $ language.type.double ::= sep , "double" , sep ;
    character $ language.type.character ::= sep , "char" , sep ;
    object $ language.gc.type.object ::= identifier ;

    true $ language.object.boolean.true ::= sep , "true" , sep ;
    false $ language.object.boolean.false ::= sep , "false" , sep ;

    identifier ::= ( alpha ) , { alphanumeric | '_' } ;
    package name ::= alpha , { alpha | "." , alpha } ; 

    alpha ::= "A" .. "Z" | "a" .. "z" ;
    alphanumeric ::= alpha | "0" .. "9" ;

    open expression ::= "(" ;
    close expression ::= ")" ;
    open scope $ language.scope.open ::= "{" ;
    close scope $ language.scope.close ::= "}" ;
    comma ::= "," ;
    colon ::= ":" ;
    semicolon ::= ";" ;
    
    assign ::= "=" ;

    not ::= "!" ;
    or ::= "||" ;
    and ::= "&&" ;

    equal ::= "==" ;
    notequal ::= "!=" ;
    lessthan ::= "<" ;
    greaterthan ::= ">" ;
    lessthanorequal ::= "<=" ;
    greaterthanorequal ::= ">=" ;

    plus ::= "+" ;
    minus ::= "-" ;
    multiply ::= "*" ;
    divide ::= "/" ;

    sep ::= ? ! alphanumeric : delimiter ? ;
    comment $ language.comment ::= "//" , { ? ! '\n' ? }, ( '\n' | ? eof ? ) ;
    whitespace $ language.whitespace ::= { ' ' | '\n' | '\r' | '\t' | ? eof ? } +;
}#

*{
    program $ language.program ::= { using directive | import directive | namespace scope } ;
    using directive $ source.package.import ::= ( using , ( identifier | package name ) $ source.package.name );
    import directive $ language.function.import ::= ( import , fn , fn sig ) ;
    import directive $ language.function.import ::= ( import , proc , proc sig ) ;

    namespace scope $ language.namespace.scope ::= 
        { comment | function | procedure | namespace def }
    namespace def $ language.namespace ::= 
        identifier $ language.namespace.name , open scope , namespace scope , close scope ;

    function $ language.function ::= ( fn , fn sig , fn body ) ;
    procedure $ language.function ::= ( proc , proc sig , proc locals , proc body ) ;
    fn sig $ language.function.signature ::= ( identifier , open expression , fn parameters , close expression , "->", type ) ;
    proc sig $ language.function.signature ::= ( identifier , open expression , proc parameters , close expression ) ;
    fn parameters $ language.function.parameters ::= [ fn parameter block , { semicolon , fn parameter block } ] ;
    proc parameters $ language.function.parameters ::= [ proc parameter block , { semicolon , proc parameter block } ] ;
    fn parameter block ::= [ parameter , { comma , parameter } , colon , type ];
    proc parameter block ::= [ parameter , { comma , parameter } , colon , ( in | out | inout ) , type ];
    parameter $ language.function.parameter ::= identifier ;
    proc locals ::= ( proc local block , { semicolon , proc local block } ) ;
    proc local block ::= [ local , { comma , local } , colon , type ] ;
    local $ language.function.local ::= identifier ;
    fn body $ language.function.body ::= scope ;
    proc body $ language.function.body ::= scope ;
    scope $ language.function.scope ::= ( open scope , { statement } , close scope ) ; 

    statement $ language.statement ::= 
        expression | assignment | return statement | if statement | for loop | while loop | do while loop;

    assignment $ language.assignment ::= 
        ( object , assign , expression );

    expression $ language.expression ::= 
        function call | boolean expression | numeric expression ;

    function call $ language.expression.call ::= 
        identifier , open expression , arguments , close expression ;

    arguments ::= [ expression , { comma , expression } ] ;

    boolean expression $ language.expression.boolean ::= 
          boolean term , { or , boolean term } $ boolean.logic.operator.or ;
    boolean term ::= 
          boolean factor , { and , boolean factor } $ boolean.logic.operator.and ;
    boolean factor ::= 
          true 
        | false 
        | ( not , boolean factor ) $ boolean.logic.operator.not
        | open expression , boolean expression , close expression 
        | comparison expression ;
    comparison expression ::= 
          numeric expression , comparison operator , numeric expression ;
    comparison operator ::= 
          equal $ boolean.operator.relational.equal ;
        | notequal $ boolean.operator.relational.notequal ;
        | lessthan $ boolean.operator.relational.lessthan ;
        | greaterthan $ boolean.operator.relational.greaterthan ;
        | lessthanorequal $ boolean.operator.relational.lessthanorequal ;
        | greaterthanorequal $ boolean.operator.relational.greaterthanorequal ;

    numeric expression $ math.expression ::= 
        term, { ( plus $ math.operator.add | minus $ math.operator.subtract ) , term } ;
    term ::= 
        factor, { ( multiply $ math.operator.multiply | divide $ math.operator.divide ), factor } ;
    factor ::= 
        [ minus $ math.operator.negate ] , primary ;
    primary ::= 
        open expression , expression , close expression | number ;

    return statement $ language.statement.return ::= 
        ( return , expression ) ;

    if statement $ language.statement.if ::= 
        if , open expression , boolean expression , close expression , ( scope | statement ) $ logic.operator.if , [ else statement ] ;
    else statement $ language.statement.else ::= 
        else, ( scope | statement ) $ logic.operator.else ;

    for loop $ language.statement.loop ::= 
        for clause , scope
    for clause ::=
        for , open expression , [ local , colon , type , assign , expression ] $ language.assignment ,
        semicolon, boolean expression , semicolon , ( expression | assignment ) , close expression ;

    while loop $ language.statement.loop ::= 
        while clause , scope
    while clause ::=
        while , open expression , boolean expression , close expression ;

    do while loop $ language.statement.loop ::= 
        do, scope, while clause

    type ::= bool | i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | float | double | character | string | object ;
}*
