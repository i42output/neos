{
    meta: {
        language: "Python"
        description: "Python 3.x"
        source.file.extension: ".py"
        source.package.specification.file.extension: ".py"
        source.package.implementation.file.extension: ".py"
        copyright: "Copyright (C) 2021 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math.universal
    ]

    expect: whitespace
    expect: comment
    expect: statement

    @: {
        whitespace: ignore
        comment: ignore
        statement: done
    }

    whitespace: {
        is: language.whitespace
        @: {
            ' ': ignore
            '\t': ignore
            '\n': ignore
            '\r': ignore
            default: next
        }
    }

    scoping_whitespace : {
        is: language.whitespace
        is: language.function.scope
        @: {
            ' ': language.scope.open.by_indentation
            '\t': language.scope.open.by_indentation
            '\n': whitespace
            '\r': whitespace
            whitespace: done
            default: next
        }
    }

    comment: {
        is: language.comment
        @: {
            '#': {
                '\n': drain
                default: ignore
            }
        }
    }

    keyword: {
        as: language.keyword
        @: {
            "and":       and
            "as":        _as_
            "assert":    assert
            "break":     break
            "class":     class
            "continue":  _continue_
            "def":       def
            "del":       del
            "elif":      elif
            "else":      else
            "except":    except
            "False":     False
            "finally":   finally
            "for":       for
            "from":      from
            "global":    global
            "if":        if
            "import":    import
            "in":        in
            "is":        _is_
            "lambda":    lambda
            "None":      None
            "nonlocal":  nonlocal
            "not":       not
            "or":        or
            "pass":      pass
            "raise":     raise
            "return":    return
            "True":      True
            "try":       try
            "while":     while
            "with":      with
            "yield":     yield
            language.keyword: {
                expect: none
                character.alpha: error
                character.underscore: error
                character.digit: error
                default: next
            }
            whitespace: ignore
        }
        and:       { is: language.keyword }
        _as_:      { is: language.keyword }
        assert:    { is: language.keyword }
        break:     { is: language.keyword }
        class:     { is: language.keyword }
        _continue_:{ is: language.keyword }
        def:       { is: language.keyword }
        del:       { is: language.keyword }
        elif:      { is: language.keyword }
        else:      { is: language.keyword }
        except:    { is: language.keyword }
        False:     { is: language.keyword }
        finally:   { is: language.keyword }
        for:       { is: language.keyword }
        from:      { is: language.keyword }
        global:    { is: language.keyword }
        if:        { is: language.keyword }
        import:    { is: language.keyword }
        in:        { is: language.keyword }
        _is_:      { is: language.keyword }
        lambda:    { is: language.keyword }
        None:      { is: language.keyword }
        nonlocal:  { is: language.keyword }
        not:       { is: language.keyword }
        or:        { is: language.keyword }
        pass:      { is: language.keyword }
        raise:     { is: language.keyword }
        return:    { is: language.keyword }
        True:      { is: language.keyword }
        try:       { is: language.keyword }
        while:     { is: language.keyword }
        with:      { is: language.keyword }
        yield:     { is: language.keyword }
    }

    statement: {
        @: {
            simple_stmt: done
            compound_stmt: done
            default: next
        }
        simple_stmt: {
            @: {
                expression_stmt : done
     //           assert_stmt : done
     //           assignment_stmt : done
     //           augmented_assignment_stmt : done
     //           annotated_assignment_stmt : done
     //           pass_stmt : done
     //           del_stmt : done
     //           return_stmt : done
     //           yield_stmt : done
     //           raise_stmt : done
     //           break_stmt : done
     //           continue_stmt : done
     //           import_stmt : done
     //           future_stmt : done
     //           global_stmt : done
     //           nonlocal_stmt : done
            }
            expression_stmt : {
                @: {
                    starred_expression: done
                }
            }
            assert_stmt : {
            }
            assignment_stmt : {
                @: {
                    target_list: {
                        '=': {
                            starred_expression: done
                            yield_expression : done
                            whitespace: ignore
                        }
                        whitespace: ignore
                    }
                }
                target_list: {
                    is: language.type
                    expect: target
                    @: {
                        target: {
                            ',': {
                                is: language.type.tuple
                                expect: target
                                target: continue
                            }
                            whitespace: ignore
                            default: next
                        }
                    }
                }
                target: {
                    expect: identifier
                    expect: attributeref
                    expect: subscription
                    expect: slicing
                    @: {
                        '(': {
                            expect: target_list
                            target_list: {
                                expect: ')'
                                ')' : done
                                whitespace: ignore
                            }
                            whitespace: ignore
                        }            
                        '[': {
                            expect: target_list
                            target_list: {
                                expect: ')'
                                ']' : done
                                whitespace: ignore
                            }
                            whitespace: ignore
                        } 
                        '*' : {
                            expect: target
                            target: done
                        }
                        whitespace: ignore
                    }
                }
            }
            augmented_assignment_stmt : {
            }
            annotated_assignment_stmt : {
            }
            pass_stmt : {
            }
            del_stmt : {
            }
            return_stmt : {
            }
            yield_stmt : {
            }
            raise_stmt : {
            }
            break_stmt : {
            }
            continue_stmt : {
            }
            import_stmt : {
            }
            future_stmt : {
            }
            global_stmt : {
            }
            nonlocal_stmt : {
            }
        }
        compound_stmt: {
            @: {
                if_stmt: done
                while_stmt: done
                for_stmt: done
                try_stmt: done
                with_stmt: done
                funcdef: done
                classdef: done
                async_with_stmt: done
                async_for_stmt: done
                async_funcdef: done
            }
            if_stmt : {
            }
            while_stmt: {
            }
            for_stmt: {
            }
            try_stmt: {
            }
            with_stmt: {
            }
            funcdef: {
            }
            classdef: {
            }
            async_with_stmt: {
            }
            async_for_stmt: {
            }
            async_funcdef: {
            }
        }
    }

    expressions: {
        @: {
            expression: {
                ',': expression
                default: next
            }
        }
    }

    expression: {
        @: {
            disjunction: {
                expect: "if"
                "if": {
                    expect: disjunction
                    disjunction: {
                        expect: "else"
                        "else": {
                            expect: expression
                            expression: done
                        }
                    }
                }
            }
            disjunction : done
            lambdef : done
        }
    }

    lambdef: {
        @: {
            expect: "lambda"
            "lambda" : {
                expect: lambda_params
                lambda_params : {
                    expect: ":"
                    ":": {
                        expect: expression
                        expression: done
                    }
                }
            }
        }
    }

    lambda_params: {
        @: {
            expect: lambda_parameters
            lambda_parameters: done
        }
    }
    

    lambda_parameters: {
        // todo   
    }

    disjunction: {
        expect: conjunction
        @: {
            conjunction : {
                expect: none
                "or": boolean.operator.logical.or
                boolean.operator.logical.or: {
                    expect: conjunction
                }
            }
            default: next
        }
    }

    conjunction: {
        expect: inversion
        @: {
            inversion : {
                expect: none
                "and": boolean.operator.logical.and
                boolean.operator.logical.and: {
                    expect: inversion
                }
            }
            default: next
        }
    }

    inversion: {
        expect: comparison
        @: {
            comparison: done
            "not": {
                expect: inversion
                inversion : boolean.operator.logical.not
                boolean.operator.logical.not: done
            }
            default: next
        }
    }
    
    comparison: {
        expect: bitwise_or
        @: {
            bitwise_or: {
                compare_op_bitwise_or_pair: again
                default: next
            }
        }
        again: {
            @: {
                compare_op_bitwise_or_pair: again
                default: next 
            }
        }
    }

    compare_op_bitwise_or_pair: {
        @: {
            eq_bitwise_or: done
            noteq_bitwise_or: done
            lte_bitwise_or: done
            lt_bitwise_or: done
            gte_bitwise_or: done
            gt_bitwise_or: done
            notin_bitwise_or: done
            in_bitwise_or: done
            isnot_bitwise_or: done
            is_bitwise_or: done
        }
    }

    eq_bitwise_or: {
        @: {
            "==": boolean.operator.relational.equal
            boolean.operator.relational.equal: bitwise_or 
            bitwise_or: done
            whitespace: ignore
        }
    }

    noteq_bitwise_or: {
        @: {
            "!=": boolean.operator.relational.notequal
            boolean.operator.relational.notequal: bitwise_or 
            bitwise_or: done
            whitespace: ignore
        }
    }

    lte_bitwise_or: {
        @: {
            "<=": boolean.operator.relational.lessthanorequal
            boolean.operator.relational.lessthanorequal: bitwise_or 
            bitwise_or: done
            whitespace: ignore
        }
    }

    lt_bitwise_or: {
        @: {
            "<": boolean.operator.relational.lessthan
            boolean.operator.relational.lessthan: bitwise_or 
            bitwise_or: done
            whitespace: ignore
        }
    }

    gte_bitwise_or: {
        @: {
            ">=": boolean.operator.relational.greaterthanorequal
            boolean.operator.relational.greaterthanorequal: bitwise_or 
            bitwise_or: done
            whitespace: ignore
        }
    }

    gt_bitwise_or: {
        @: {
            ">": boolean.operator.relational.greaterthan
            boolean.operator.relational.greaterthan: bitwise_or 
            bitwise_or: done
            whitespace: ignore
        }
    }

    // todo
    notin_bitwise_or: {
        @: {
            expect: "not"
            "not": {
                expect: "in"
                "in": {
                    expect: bitwise_or
                    bitwise_or: done
                    whitespace: ignore
                }
                whitespace: ignore
            }
            whitespace: ignore
        }
    }

    // todo
    in_bitwise_or: {
        @: {
            expect: "in"
            "in": {
                expect: bitwise_or
                bitwise_or: done
                whitespace: ignore
            }
            whitespace: ignore
        }
    }

    // todo
    isnot_bitwise_or: {
        @: {
            expect: "is"
            "is": {
                expect: "not"
                "not": {
                    expect: bitwise_or
                    bitwise_or: done
                    whitespace: ignore
                }
                whitespace: ignore
            }
            whitespace: ignore
        }
    }

    // todo
    is_bitwise_or: {
        @: {
            expect: "is"
            "is": {
                expect: bitwise_or
                bitwise_or: done
                whitespace: ignore
            }
            whitespace: ignore
        }
    }

    bitwise_or: {
        @: {
            expect: '|'
            expect: bitwise_xor
            '|': bitwise.operator.or
            bitwise.operator.or: {
                expect: bitwise_or
                expect: bitwise_xor
                bitwise_or: done
                bitwise_xor: done
            }
            bitwise_xor: done
            whitespace: ignore
        }
    }

    bitwise_xor: {
        @: {
            expect: '^'
            expect: bitwise_and
            '^': bitwise.operator.xor
            bitwise.operator.or: {
                expect: bitwise_xor
                expect: bitwise_and
                bitwise_xor: done
                bitwise_and: done
            }
            bitwise_and: done
            whitespace: ignore
        }
    }

    bitwise_and: {
        @: {
            expect: '&'
            expect: shift_expr
            '&': bitwise.operator.and
            bitwise.operator.and: {
                expect: bitwise_and
                expect: shift_expr
                bitwise_and: done
                shift_expr: done
            }
            shift_expr: done
            whitespace: ignore
        }
    }

    shift_expr: {
        @: {
            expect: "<<"
            expect: ">>"
            expect: sum
            "<<": bitwise.operator.shift.left
            ">>": bitwise.operator.shift.right
            bitwise.operator.shift.left: {
                expect: shift_expr
                expect: sum
                shift_expr: done
                sum: done
            }
            sum: done
            whitespace: ignore
        }
    }
/*
sum:
    | sum '+' term 
    | sum '-' term 
    | term
term:
    | term '*' factor 
    | term '/' factor 
    | term '//' factor 
    | term '%' factor 
    | term '@' factor 
    | factor
factor:
    | '+' factor 
    | '-' factor 
    | '~' factor 
    | power
power:
    | await_primary '**' factor 
    | await_primary
await_primary:
    | AWAIT primary 
    | primary
primary:
    | invalid_primary  # must be before 'primay genexp' because of invalid_genexp
    | primary '.' NAME 
    | primary genexp 
    | primary '(' [arguments] ')' 
    | primary '[' slices ']' 
    | atom

slices:
    | slice !',' 
    | ','.slice+ [','] 
slice:
    | [expression] ':' [expression] [':' [expression] ] 
    | expression 
atom:
    | NAME
    | 'True' 
    | 'False' 
    | 'None' 
    | '__peg_parser__' 
    | strings
    | NUMBER
    | (tuple | group | genexp)
    | (list | listcomp)
    | (dict | set | dictcomp | setcomp)
    | '...' 
*/
    assignment_expression: {
    }

    starred_expression: {
        @: {
            expression: done
            starred_item : {
                ',' : starred_item
                default: next
            }
        }
        starred_item : {
            @: {
                '*': or_expr
                assignment_expression: done
                default: next
            }
        }
    }

    yield_expression : {
    }

    identifier : {
    }

    attributeref : {
    }

    subscription : {
    }

    slicing : {
    }

    character: {
        is: string.utf8.character
    }

    string_literal: {
        is: string.utf8
        @: {
            "\"\"\"": start_multiline_double
            "\'\'\'": start_multiline_single
            '\"': start_double
            '\'': start_single
        }
        start_double: {
            @: {                
                '\"': {
                    end: next
                }
                escape: continue
                '\\': error
                '\n': error
                '\r': error
                character: continue
            }
            end: {
                @: {
                    expect: none
                    "\"\"\"": start_multiline_double
                    "\'\'\'": start_multiline_single
                    '\"': start_double
                    '\'': start_single
                    whitespace: ignore
                    default: next
                }
            }
        }
        start_single: {
            @: {                
                '\'': {
                    end: next
                }
                escape: continue
                '\\': error
                '\n': error
                '\r': error
                character: continue
            }
            end: {
                @: {
                    expect: none
                    "\"\"\"": start_multiline_double
                    "\'\'\'": start_multiline_single
                    '\"': start_double
                    '\'': start_single
                    whitespace: ignore
                    default: next
                }
            }
        }
        start_multiline_double: {
            @: {                
                "\"\"\"": {
                    end: next
                }
                escape: continue
                character: continue
            }
            end: {
                @: {
                    expect: none
                    "\"\"\"": start_multiline_double
                    "\'\'\'": start_multiline_single
                    '\"': start_double
                    '\'': start_single
                    whitespace: ignore
                    default: next
                }
            }
        }
        start_multiline_single: {
            @: {                
                "\'\'\'": {
                    end: next
                }
                escape: continue
                character: continue
            }
            end: {
                @: {
                    expect: none
                    '\"': start_double
                    '\'': start_single
                    "\"\"\"": start_multiline_double
                    "\'\'\'": start_multiline_single
                    whitespace: ignore
                    default: next
                }
            }
        }
        escape: {
            @: {
                '\\': {
                    'n': character.LF
                    character.LF: done
                    'r': character.CR
                    character.CR: done
                    't': character.tab
                    character.tab: done
                    '\"': character.double_quote
                    character.backslash: done
                    '\'': character.single_quote
                    character.backslash: done
                    '\\': character.backslash
                    character.backslash: done
                }
            }
        }
    }

    universal_number: {
        is: math.universal.number
        @: {
            digit: {
                digit: continue
                '.': point
                point: {
                    '.': error
                    digit: continue
                    'e': exponent
                    'E': exponent
                    default: next
                }
                default: next
            }
            '#': base
            base: {
                hexdigit: continue
                '.': point
                point: {
                    '.': error
                    hexdigit: continue
                    '#': {
                        'e': exponent
                        'E': exponent
                        default: next
                    }
                    default: next
                }
                '#': {
                    'e': exponent
                    'E': exponent
                    default: next
                }
            }
            exponent: {
                expect: '+'
                expect: '-'
                '+': exponent.positive
                exponent.positive: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
                '-': exponent.negative
                exponent.negative: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
            }
        }
    }
}