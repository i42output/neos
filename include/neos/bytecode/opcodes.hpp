/*
  opcodes.hpp

  Copyright (c) 2025 Leigh Johnston.  All Rights Reserved.

  This program is free software: you can redistribute it and / or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include <neos/neos.hpp>
#include <variant>
#include <unordered_map>
#include <neos/bytecode/exceptions.hpp>

namespace neos
{
    namespace bytecode
    {
        // Define the opcode enum (core + extended)
        enum class opcode 
        {
            // Core MVP Opcodes (Single-byte)
            Unreachable,
            Nop,
            Block,
            Loop,
            If,
            Else,
            End = 0x0B,
            Br = 0x0C,
            BrIf,
            BrTable,
            Return,
            Call,
            CallIndirect,
            Drop = 0x1A,
            Select,
            LocalGet = 0x20,
            LocalSet,
            LocalTee,
            GlobalGet,
            GlobalSet,
            I32Load = 0x28,
            I64Load,
            F32Load,
            F64Load,
            I32Load8S,
            I32Load8U,
            I32Load16S,
            I32Load16U,
            I64Load8S,
            I64Load8U,
            I64Load16S,
            I64Load16U,
            I64Load32S,
            I64Load32U,
            I32Store,
            I64Store,
            F32Store,
            F64Store,
            I32Store8,
            I32Store16,
            I64Store8,
            I64Store16,
            I64Store32,
            MemorySize,
            MemoryGrow,
            I32Const,
            I64Const,
            F32Const,
            F64Const,
            I32Eqz,
            I32Eq,
            I32Ne,
            I32LtS,
            I32LtU,
            I32GtS,
            I32GtU,
            I32LeS,
            I32LeU,
            I32GeS,
            I32GeU,
            I64Eqz,
            I64Eq,
            I64Ne,
            I64LtS,
            I64LtU,
            I64GtS,
            I64GtU,
            I64LeS,
            I64LeU,
            I64GeS,
            I64GeU,
            F32Eq,
            F32Ne,
            F32Lt,
            F32Gt,
            F32Le,
            F32Ge,
            F64Eq,
            F64Ne,
            F64Lt,
            F64Gt,
            F64Le,
            F64Ge,
            I32Clz,
            I32Ctz,
            I32Popcnt,
            I32Add,
            I32Sub,
            I32Mul,
            I32DivS,
            I32DivU,
            I32RemS,
            I32RemU,
            I32And,
            I32Or,
            I32Xor,
            I32Shl,
            I32ShrS,
            I32ShrU,
            I32Rotl,
            I32Rotr,
            I64Clz,
            I64Ctz,
            I64Popcnt,
            I64Add,
            I64Sub,
            I64Mul,
            I64DivS,
            I64DivU,
            I64RemS,
            I64RemU,
            I64And,
            I64Or,
            I64Xor,
            I64Shl,
            I64ShrS,
            I64ShrU,
            I64Rotl,
            I64Rotr,
            F32Abs,
            F32Neg,
            F32Ceil,
            F32Floor,
            F32Trunc,
            F32Nearest,
            F32Sqrt,
            F32Add,
            F32Sub,
            F32Mul,
            F32Div,
            F32Min,
            F32Max,
            F32Copysign,
            F64Abs,
            F64Neg,
            F64Ceil,
            F64Floor,
            F64Trunc,
            F64Nearest,
            F64Sqrt,
            F64Add,
            F64Sub,
            F64Mul,
            F64Div,
            F64Min,
            F64Max,
            F64Copysign,
            I32WrapI64,
            I32TruncF32S,
            I32TruncF32U,
            I32TruncF64S,
            I32TruncF64U,
            I64ExtendI32S,
            I64ExtendI32U,
            I64TruncF32S,
            I64TruncF32U,
            I64TruncF64S,
            I64TruncF64U,
            F32ConvertI32S,
            F32ConvertI32U,
            F32ConvertI64S,
            F32ConvertI64U,
            F32DemoteF64,
            F64ConvertI32S,
            F64ConvertI32U,
            F64ConvertI64S,
            F64ConvertI64U,
            F64PromoteF32,
            I32ReinterpretF32,
            I64ReinterpretF64,
            F32ReinterpretI32,
            F64ReinterpretI64,
            I32Extend8S,
            I32Extend16S,
            I64Extend8S,
            I64Extend16S,
            I64Extend32S,

            // Extended Opcodes (0xFB prefix) - Garbage Collection
            StructNew,
            StructNewDefault,
            StructGet,
            StructGetS,
            StructGetU,
            StructSet,
            ArrayNew,
            ArrayNewDefault,
            ArrayNewData,
            ArrayNewElem,
            ArrayNewFixed,
            ArrayGet,
            ArrayGetS,
            ArrayGetU,
            ArraySet,
            ArrayLen,
            ArrayFill,
            ArrayCopy,
            ArrayInitData,
            ArrayInitElem,
            RefI31,
            I31GetS,
            I31GetU,
            RefTest,
            RefCast,
            BrOnCast,
            BrOnCastFail,
            AnyConvertExtern,
            ExternConvertAny,
            RefIsFunc,
            RefIsData,
            RefIsI31,
            RefAsFunc,
            RefAsData,
            RefAsI31,
            BrOnFunc,
            BrOnData,
            BrOnI31,
            BrOnNonFunc,
            BrOnNonData,
            BrOnNonI31,

            // Extended Opcodes (0xFC prefix) - Bulk Memory and Saturating Conversions
            I32TruncSatF32S,
            I32TruncSatF32U,
            I32TruncSatF64S,
            I32TruncSatF64U,
            I64TruncSatF32S,
            I64TruncSatF32U,
            I64TruncSatF64S,
            I64TruncSatF64U,
            MemoryInit,
            DataDrop,
            MemoryCopy,
            MemoryFill,
            TableInit,
            ElemDrop,
            TableCopy,
            TableGrow,
            TableSize,
            TableFill,

            // Extended Opcodes (0xFD prefix) - SIMD
            V128Load,
            V128Load8x8S,
            V128Load8x8U,
            V128Load16x4S,
            V128Load16x4U,
            V128Load32x2S,
            V128Load32x2U,
            V128Load8Splat,
            V128Load16Splat,
            V128Load32Splat,
            V128Load64Splat,
            V128Store,
            V128Const,
            I8x16Shuffle,
            I8x16Swizzle,
            I8x16Splat,
            I16x8Splat,
            I32x4Splat,
            I64x2Splat,
            F32x4Splat,
            F64x2Splat,
            I8x16ExtractLaneS,
            I8x16ExtractLaneU,
            I8x16ReplaceLane,
            I16x8ExtractLaneS,
            I16x8ExtractLaneU,
            I16x8ReplaceLane,
            I32x4ExtractLane,
            I32x4ReplaceLane,
            I64x2ExtractLane,
            I64x2ReplaceLane,
            F32x4ExtractLane,
            F32x4ReplaceLane,
            F64x2ExtractLane,
            F64x2ReplaceLane,
            I8x16Eq,
            I8x16Ne,
            I8x16LtS,
            I8x16LtU,
            I8x16GtS,
            I8x16GtU,
            I8x16LeS,
            I8x16LeU,
            I8x16GeS,
            I8x16GeU,
            I16x8Eq,
            I16x8Ne,
            I16x8LtS,
            I16x8LtU,
            I16x8GtS,
            I16x8GtU,
            I16x8LeS,
            I16x8LeU,
            I16x8GeS,
            I16x8GeU,
            I32x4Eq,
            I32x4Ne,
            I32x4LtS,
            I32x4LtU,
            I32x4GtS,
            I32x4GtU,
            I32x4LeS,
            I32x4LeU,
            I32x4GeS,
            I32x4GeU,
            F32x4Eq,
            F32x4Ne,
            F32x4Lt,
            F32x4Gt,
            F32x4Le,
            F32x4Ge,
            F64x2Eq,
            F64x2Ne,
            F64x2Lt,
            F64x2Gt,
            F64x2Le,
            F64x2Ge,
            V128Not,
            V128And,
            V128AndNot,
            V128Or,
            V128Xor,
            V128BitSelect,
            V128AnyTrue,
            V128Load32Zero,
            V128Load64Zero,
            I8x16Abs,
            I8x16Neg,
            I8x16Popcnt,
            I8x16AllTrue,
            I8x16Bitmask,
            I8x16NarrowI16x8S,
            I8x16NarrowI16x8U,
            I8x16Add,
            I8x16AddSatS,
            I8x16AddSatU,
            I8x16Sub,
            I8x16SubSatS,
            I8x16SubSatU,
            I8x16MinS,
            I8x16MinU,
            I8x16MaxS,
            I8x16MaxU,
            I16x8Abs,
            I16x8Neg,
            I16x8Q15MulRSatS,
            I16x8AllTrue,
            I16x8Bitmask,
            I16x8NarrowI32x4S,
            I16x8NarrowI32x4U,
            I16x8ExtendLowI8x16S,
            I16x8ExtendHighI8x16S,
            I16x8ExtendLowI8x16U,
            I16x8ExtendHighI8x16U,
            I16x8Add,
            I16x8AddSatS,
            I16x8AddSatU,
            I16x8Sub,
            I16x8SubSatS,
            I16x8SubSatU,
            I16x8Mul,
            I16x8MinS,
            I16x8MinU,
            I16x8MaxS,
            I16x8MaxU,
            I16x8ExtMulLowI8x16S,
            I16x8ExtMulHighI8x16S,
            I16x8ExtMulLowI8x16U,
            I16x8ExtMulHighI8x16U,
            I32x4Abs,
            I32x4Neg,
            I32x4AllTrue,
            I32x4Bitmask,
            I32x4ExtendLowI16x8S,
            I32x4ExtendHighI16x8S,
            I32x4ExtendLowI16x8U,
            I32x4ExtendHighI16x8U,
            I32x4Add,
            I32x4Sub,
            I32x4Mul,
            I32x4MinS,
            I32x4MinU,
            I32x4MaxS,
            I32x4MaxU,
            I32x4DotI16x8S,
            I32x4ExtMulLowI16x8S,
            I32x4ExtMulHighI16x8S,
            I32x4ExtMulLowI16x8U,
            I32x4ExtMulHighI16x8U,
            I64x2Abs,
            I64x2Neg,
            I64x2AllTrue,
            I64x2Bitmask,
            I64x2ExtendLowI32x4S,
            I64x2ExtendHighI32x4S,
            I64x2ExtendLowI32x4U,
            I64x2ExtendHighI32x4U,
            I64x2Add,
            I64x2Sub,
            I64x2Mul,
            I64x2ExtMulLowI32x4S,
            I64x2ExtMulHighI32x4S,
            I64x2ExtMulLowI32x4U,
            I64x2ExtMulHighI32x4U,
            F32x4Abs,
            F32x4Neg,
            F32x4Sqrt,
            F32x4Add,
            F32x4Sub,
            F32x4Mul,
            F32x4Div,
            F32x4Min,
            F32x4Max,
            F64x2Abs,
            F64x2Neg,
            F64x2Sqrt,
            F64x2Add,
            F64x2Sub,
            F64x2Mul,
            F64x2Div,
            F64x2Min,
            F64x2Max,
            I32x4TruncSatF32x4S,
            I32x4TruncSatF32x4U,
            F32x4ConvertI32x4S,
            F32x4ConvertI32x4U,

            // Extended Opcodes (0xFE prefix) - Threads and Atomic Operations
            MemoryAtomicNotify,
            MemoryAtomicWait32,
            MemoryAtomicWait64,
            AtomicFence,
            I32AtomicLoad,
            I32AtomicLoad8U,
            I32AtomicLoad16U,
            I64AtomicLoad,
            I64AtomicLoad8U,
            I64AtomicLoad16U,
            I64AtomicLoad32U,
            I32AtomicStore,
            I32AtomicStore8,
            I32AtomicStore16,
            I64AtomicStore,
            I64AtomicStore8,
            I64AtomicStore16,
            I64AtomicStore32,
            I32AtomicRmwAdd,
            I32AtomicRmw8AddU,
            I32AtomicRmw16AddU,
            I64AtomicRmwAdd,
            I64AtomicRmw8AddU,
            I64AtomicRmw16AddU,
            I64AtomicRmw32AddU,
            I32AtomicRmwSub,
            I32AtomicRmw8SubU,
            I32AtomicRmw16SubU,
            I64AtomicRmwSub,
            I64AtomicRmw8SubU,
            I64AtomicRmw16SubU,
            I64AtomicRmw32SubU,
            I32AtomicRmwAnd,
            I32AtomicRmw8AndU,
            I32AtomicRmw16AndU,
            I64AtomicRmwAnd,
            I64AtomicRmw8AndU,
            I64AtomicRmw16AndU,
            I64AtomicRmw32AndU,
            I32AtomicRmwOr,
            I32AtomicRmw8OrU,
            I32AtomicRmw16OrU,
            I64AtomicRmwOr,
            I64AtomicRmw8OrU,
            I64AtomicRmw16OrU,
            I64AtomicRmw32OrU,
            I32AtomicRmwXor,
            I32AtomicRmw8XorU,
            I32AtomicRmw16XorU,
            I64AtomicRmwXor,
            I64AtomicRmw8XorU,
            I64AtomicRmw16XorU,
            I64AtomicRmw32XorU,
            I32AtomicRmwXchg,
            I32AtomicRmw8XchgU,
            I32AtomicRmw16XchgU,
            I64AtomicRmwXchg,
            I64AtomicRmw8XchgU,
            I64AtomicRmw16XchgU,
            I64AtomicRmw32XchgU,
            I32AtomicRmwCmpxchg,
            I32AtomicRmw8CmpxchgU,
            I32AtomicRmw16CmpxchgU,
            I64AtomicRmwCmpxchg,
            I64AtomicRmw8CmpxchgU,
            I64AtomicRmw16CmpxchgU,
            I64AtomicRmw32CmpxchgU,
        };

        struct op1 { std::uint8_t b1; constexpr std::strong_ordering operator<=>(op1 const&) const noexcept = default; };
        struct op2 { std::uint8_t b1, b2; constexpr std::strong_ordering operator<=>(op2 const&) const noexcept = default; };
        using encoding = std::variant<op1, op2>;

        struct encoding_hash
        {
            std::uint32_t operator()(encoding const& encoding) const
            {
                if (std::holds_alternative<op1>(encoding))
                    return static_cast<std::uint32_t>(std::get<op1>(encoding).b1);
                else if (std::holds_alternative<op2>(encoding))
                    return static_cast<std::uint32_t>(std::get<op2>(encoding).b1) +
                        (static_cast<std::uint32_t>(std::get<op2>(encoding).b2) << 8u);
                throw exceptions::logic_error();
            }
        };

        struct opcode_entry
        {
            opcode opcode;
            encoding encoding;

            operator std::pair<const decltype(opcode), decltype(encoding)>() const
            {
                return std::make_pair(opcode, encoding);
            }

            operator std::pair<const decltype(encoding), decltype(opcode)>() const
            {
                return std::make_pair(encoding, opcode);
            }
        };

        inline std::vector<opcode_entry> const& opcodes()
        {
            static std::vector<opcode_entry> const sOpCodes = 
            {
                // Core MVP Opcodes (Single-byte)
                { opcode::Unreachable,      op1{ 0x00 } },
                { opcode::Nop,              op1{ 0x01 } },
                { opcode::Block,            op1{ 0x02 } },
                { opcode::Loop,             op1{ 0x03 } },
                { opcode::If,               op1{ 0x04 } },
                { opcode::Else,             op1{ 0x05 } },
                { opcode::End,              op1{ 0x0B } },
                { opcode::Br,               op1{ 0x0C } },
                { opcode::BrIf,             op1{ 0x0D } },
                { opcode::BrTable,          op1{ 0x0E } },
                { opcode::Return,           op1{ 0x0F } },
                { opcode::Call,             op1{ 0x10 } },
                { opcode::CallIndirect,     op1{ 0x11 } },
                { opcode::Drop,             op1{ 0x1A } },
                { opcode::Select,           op1{ 0x1B } },
                { opcode::LocalGet,         op1{ 0x20 } },
                { opcode::LocalSet,         op1{ 0x21 } },
                { opcode::LocalTee,         op1{ 0x22 } },
                { opcode::GlobalGet,        op1{ 0x23 } },
                { opcode::GlobalSet,        op1{ 0x24 } },
                { opcode::I32Load,          op1{ 0x28 } },
                { opcode::I64Load,          op1{ 0x29 } },
                { opcode::F32Load,          op1{ 0x2A } },
                { opcode::F64Load,          op1{ 0x2B } },
                { opcode::I32Load8S,        op1{ 0x2C } },
                { opcode::I32Load8U,        op1{ 0x2D } },
                { opcode::I32Load16S,       op1{ 0x2E } },
                { opcode::I32Load16U,       op1{ 0x2F } },
                { opcode::I64Load8S,        op1{ 0x30 } },
                { opcode::I64Load8U,        op1{ 0x31 } },
                { opcode::I64Load16S,       op1{ 0x32 } },
                { opcode::I64Load16U,       op1{ 0x33 } },
                { opcode::I64Load32S,       op1{ 0x34 } },
                { opcode::I64Load32U,       op1{ 0x35 } },
                { opcode::I32Store,         op1{ 0x36 } },
                { opcode::I64Store,         op1{ 0x37 } },
                { opcode::F32Store,         op1{ 0x38 } },
                { opcode::F64Store,         op1{ 0x39 } },
                { opcode::I32Store8,        op1{ 0x3A } },
                { opcode::I32Store16,       op1{ 0x3B } },
                { opcode::I64Store8,        op1{ 0x3C } },
                { opcode::I64Store16,       op1{ 0x3D } },
                { opcode::I64Store32,       op1{ 0x3E } },
                { opcode::MemorySize,       op1{ 0x3F } },
                { opcode::MemoryGrow,       op1{ 0x40 } },
                { opcode::I32Const,         op1{ 0x41 } },
                { opcode::I64Const,         op1{ 0x42 } },
                { opcode::F32Const,         op1{ 0x43 } },
                { opcode::F64Const,         op1{ 0x44 } },
                { opcode::I32Eqz,           op1{ 0x45 } },
                { opcode::I32Eq,            op1{ 0x46 } },
                { opcode::I32Ne,            op1{ 0x47 } },
                { opcode::I32LtS,           op1{ 0x48 } },
                { opcode::I32LtU,           op1{ 0x49 } },
                { opcode::I32GtS,           op1{ 0x4A } },
                { opcode::I32GtU,           op1{ 0x4B } },
                { opcode::I32LeS,           op1{ 0x4C } },
                { opcode::I32LeU,           op1{ 0x4D } },
                { opcode::I32GeS,           op1{ 0x4E } },
                { opcode::I32GeU,           op1{ 0x4F } },
                { opcode::I64Eqz,           op1{ 0x50 } },
                { opcode::I64Eq,            op1{ 0x51 } },
                { opcode::I64Ne,            op1{ 0x52 } },
                { opcode::I64LtS,           op1{ 0x53 } },
                { opcode::I64LtU,           op1{ 0x54 } },
                { opcode::I64GtS,           op1{ 0x55 } },
                { opcode::I64GtU,           op1{ 0x56 } },
                { opcode::I64LeS,           op1{ 0x57 } },
                { opcode::I64LeU,           op1{ 0x58 } },
                { opcode::I64GeS,           op1{ 0x59 } },
                { opcode::I64GeU,           op1{ 0x5A } },
                { opcode::F32Eq,            op1{ 0x5B } },
                { opcode::F32Ne,            op1{ 0x5C } },
                { opcode::F32Lt,            op1{ 0x5D } },
                { opcode::F32Gt,            op1{ 0x5E } },
                { opcode::F32Le,            op1{ 0x5F } },
                { opcode::F32Ge,            op1{ 0x60 } },
                { opcode::F64Eq,            op1{ 0x61 } },
                { opcode::F64Ne,            op1{ 0x62 } },
                { opcode::F64Lt,            op1{ 0x63 } },
                { opcode::F64Gt,            op1{ 0x64 } },
                { opcode::F64Le,            op1{ 0x65 } },
                { opcode::F64Ge,            op1{ 0x66 } },
                { opcode::I32Clz,           op1{ 0x67 } },
                { opcode::I32Ctz,           op1{ 0x68 } },
                { opcode::I32Popcnt,        op1{ 0x69 } },
                { opcode::I32Add,           op1{ 0x6A } },
                { opcode::I32Sub,           op1{ 0x6B } },
                { opcode::I32Mul,           op1{ 0x6C } },
                { opcode::I32DivS,          op1{ 0x6D } },
                { opcode::I32DivU,          op1{ 0x6E } },
                { opcode::I32RemS,          op1{ 0x6F } },
                { opcode::I32RemU,          op1{ 0x70 } },
                { opcode::I32And,           op1{ 0x71 } },
                { opcode::I32Or,            op1{ 0x72 } },
                { opcode::I32Xor,           op1{ 0x73 } },
                { opcode::I32Shl,           op1{ 0x74 } },
                { opcode::I32ShrS,          op1{ 0x75 } },
                { opcode::I32ShrU,          op1{ 0x76 } },
                { opcode::I32Rotl,          op1{ 0x77 } },
                { opcode::I32Rotr,          op1{ 0x78 } },
                { opcode::I64Clz,           op1{ 0x79 } },
                { opcode::I64Ctz,           op1{ 0x7A } },
                { opcode::I64Popcnt,        op1{ 0x7B } },
                { opcode::I64Add,           op1{ 0x7C } },
                { opcode::I64Sub,           op1{ 0x7D } },
                { opcode::I64Mul,           op1{ 0x7E } },
                { opcode::I64DivS,          op1{ 0x7F } },
                { opcode::I64DivU,          op1{ 0x80 } },
                { opcode::I64RemS,          op1{ 0x81 } },
                { opcode::I64RemU,          op1{ 0x82 } },
                { opcode::I64And,           op1{ 0x83 } },
                { opcode::I64Or,            op1{ 0x84 } },
                { opcode::I64Xor,           op1{ 0x85 } },
                { opcode::I64Shl,           op1{ 0x86 } },
                { opcode::I64ShrS,          op1{ 0x87 } },
                { opcode::I64ShrU,          op1{ 0x88 } },
                { opcode::I64Rotl,          op1{ 0x89 } },
                { opcode::I64Rotr,          op1{ 0x8A } },
                { opcode::F32Abs,           op1{ 0x8B } },
                { opcode::F32Neg,           op1{ 0x8C } },
                { opcode::F32Ceil,          op1{ 0x8D } },
                { opcode::F32Floor,         op1{ 0x8E } },
                { opcode::F32Trunc,         op1{ 0x8F } },
                { opcode::F32Nearest,       op1{ 0x90 } },
                { opcode::F32Sqrt,          op1{ 0x91 } },
                { opcode::F32Add,           op1{ 0x92 } },
                { opcode::F32Sub,           op1{ 0x93 } },
                { opcode::F32Mul,           op1{ 0x94 } },
                { opcode::F32Div,           op1{ 0x95 } },
                { opcode::F32Min,           op1{ 0x96 } },
                { opcode::F32Max,           op1{ 0x97 } },
                { opcode::F32Copysign,      op1{ 0x98 } },
                { opcode::F64Abs,           op1{ 0x99 } },
                { opcode::F64Neg,           op1{ 0x9A } },
                { opcode::F64Ceil,          op1{ 0x9B } },
                { opcode::F64Floor,         op1{ 0x9C } },
                { opcode::F64Trunc,         op1{ 0x9D } },
                { opcode::F64Nearest,       op1{ 0x9E } },
                { opcode::F64Sqrt,          op1{ 0x9F } },
                { opcode::F64Add,           op1{ 0xA0 } },
                { opcode::F64Sub,           op1{ 0xA1 } },
                { opcode::F64Mul,           op1{ 0xA2 } },
                { opcode::F64Div,           op1{ 0xA3 } },
                { opcode::F64Min,           op1{ 0xA4 } },
                { opcode::F64Max,           op1{ 0xA5 } },
                { opcode::F64Copysign,      op1{ 0xA6 } },
                { opcode::I32WrapI64,       op1{ 0xA7 } },
                { opcode::I32TruncF32S,     op1{ 0xA8 } },
                { opcode::I32TruncF32U,     op1{ 0xA9 } },
                { opcode::I32TruncF64S,     op1{ 0xAA } },
                { opcode::I32TruncF64U,     op1{ 0xAB } },
                { opcode::I64ExtendI32S,    op1{ 0xAC } },
                { opcode::I64ExtendI32U,    op1{ 0xAD } },
                { opcode::I64TruncF32S,     op1{ 0xAE } },
                { opcode::I64TruncF32U,     op1{ 0xAF } },
                { opcode::I64TruncF64S,     op1{ 0xB0 } },
                { opcode::I64TruncF64U,     op1{ 0xB1 } },
                { opcode::F32ConvertI32S,   op1{ 0xB2 } },
                { opcode::F32ConvertI32U,   op1{ 0xB3 } },
                { opcode::F32ConvertI64S,   op1{ 0xB4 } },
                { opcode::F32ConvertI64U,   op1{ 0xB5 } },
                { opcode::F32DemoteF64,     op1{ 0xB6 } },
                { opcode::F64ConvertI32S,   op1{ 0xB7 } },
                { opcode::F64ConvertI32U,   op1{ 0xB8 } },
                { opcode::F64ConvertI64S,   op1{ 0xB9 } },
                { opcode::F64ConvertI64U,   op1{ 0xBA } },
                { opcode::F64PromoteF32,    op1{ 0xBB } },
                { opcode::I32ReinterpretF32, op1{ 0xBC } },
                { opcode::I64ReinterpretF64, op1{ 0xBD } },
                { opcode::F32ReinterpretI32, op1{ 0xBE } },
                { opcode::F64ReinterpretI64, op1{ 0xBF } },
                { opcode::I32Extend8S,      op1{ 0xC0 } },
                { opcode::I32Extend16S,     op1{ 0xC1 } },
                { opcode::I64Extend8S,      op1{ 0xC2 } },
                { opcode::I64Extend16S,     op1{ 0xC3 } },
                { opcode::I64Extend32S,     op1{ 0xC4 } },

                // Extended Opcodes (0xFB prefix) - Garbage Collection Proposal
                { opcode::StructNew,        op2{ 0xFB, 0x00 } },
                { opcode::StructNewDefault, op2{ 0xFB, 0x01 } },
                { opcode::StructGet,        op2{ 0xFB, 0x02 } },
                { opcode::StructGetS,       op2{ 0xFB, 0x03 } },
                { opcode::StructGetU,       op2{ 0xFB, 0x04 } },
                { opcode::StructSet,        op2{ 0xFB, 0x05 } },
                { opcode::ArrayNew,         op2{ 0xFB, 0x06 } },
                { opcode::ArrayNewDefault,  op2{ 0xFB, 0x07 } },
                { opcode::ArrayNewData,     op2{ 0xFB, 0x08 } },
                { opcode::ArrayNewElem,     op2{ 0xFB, 0x09 } },
                { opcode::ArrayNewFixed,    op2{ 0xFB, 0x0A } },
                { opcode::ArrayGet,         op2{ 0xFB, 0x0B } },
                { opcode::ArrayGetS,        op2{ 0xFB, 0x0C } },
                { opcode::ArrayGetU,        op2{ 0xFB, 0x0D } },
                { opcode::ArraySet,         op2{ 0xFB, 0x0E } },
                { opcode::ArrayLen,         op2{ 0xFB, 0x0F } },
                { opcode::ArrayFill,        op2{ 0xFB, 0x10 } },
                { opcode::ArrayCopy,        op2{ 0xFB, 0x11 } },
                { opcode::ArrayInitData,    op2{ 0xFB, 0x12 } },
                { opcode::ArrayInitElem,    op2{ 0xFB, 0x13 } },
                { opcode::RefI31,           op2{ 0xFB, 0x14 } },
                { opcode::I31GetS,          op2{ 0xFB, 0x15 } },
                { opcode::I31GetU,          op2{ 0xFB, 0x16 } },
                { opcode::RefTest,          op2{ 0xFB, 0x20 } },
                { opcode::RefCast,          op2{ 0xFB, 0x21 } },
                { opcode::BrOnCast,         op2{ 0xFB, 0x22 } },
                { opcode::BrOnCastFail,     op2{ 0xFB, 0x23 } },
                { opcode::AnyConvertExtern, op2{ 0xFB, 0x30 } },
                { opcode::ExternConvertAny, op2{ 0xFB, 0x31 } },
                { opcode::RefIsFunc,        op2{ 0xFB, 0x40 } },
                { opcode::RefIsData,        op2{ 0xFB, 0x41 } },
                { opcode::RefIsI31,         op2{ 0xFB, 0x42 } },
                { opcode::RefAsFunc,        op2{ 0xFB, 0x50 } },
                { opcode::RefAsData,        op2{ 0xFB, 0x51 } },
                { opcode::RefAsI31,         op2{ 0xFB, 0x52 } },
                { opcode::BrOnFunc,         op2{ 0xFB, 0x60 } },
                { opcode::BrOnData,         op2{ 0xFB, 0x61 } },
                { opcode::BrOnI31,          op2{ 0xFB, 0x62 } },
                { opcode::BrOnNonFunc,      op2{ 0xFB, 0x70 } },
                { opcode::BrOnNonData,      op2{ 0xFB, 0x71 } },
                { opcode::BrOnNonI31,       op2{ 0xFB, 0x72 } },

                // Extended Opcodes (0xFC prefix) - Bulk Memory and Saturating Conversions
                { opcode::I32TruncSatF32S,  op2{ 0xFC, 0x00 } },
                { opcode::I32TruncSatF32U,  op2{ 0xFC, 0x01 } },
                { opcode::I32TruncSatF64S,  op2{ 0xFC, 0x02 } },
                { opcode::I32TruncSatF64U,  op2{ 0xFC, 0x03 } },
                { opcode::I64TruncSatF32S,  op2{ 0xFC, 0x04 } },
                { opcode::I64TruncSatF32U,  op2{ 0xFC, 0x05 } },
                { opcode::I64TruncSatF64S,  op2{ 0xFC, 0x06 } },
                { opcode::I64TruncSatF64U,  op2{ 0xFC, 0x07 } },
                { opcode::MemoryInit,       op2{ 0xFC, 0x08 } },
                { opcode::DataDrop,         op2{ 0xFC, 0x09 } },
                { opcode::MemoryCopy,       op2{ 0xFC, 0x0A } },
                { opcode::MemoryFill,       op2{ 0xFC, 0x0B } },
                { opcode::TableInit,        op2{ 0xFC, 0x0C } },
                { opcode::ElemDrop,         op2{ 0xFC, 0x0D } },
                { opcode::TableCopy,        op2{ 0xFC, 0x0E } },
                { opcode::TableGrow,        op2{ 0xFC, 0x0F } },
                { opcode::TableSize,        op2{ 0xFC, 0x10 } },
                { opcode::TableFill,        op2{ 0xFC, 0x11 } },

                // Extended Opcodes (0xFD prefix) - SIMD (128-bit vector operations)
                { opcode::V128Load,         op2{ 0xFD, 0x00 } },
                { opcode::V128Load8x8S,     op2{ 0xFD, 0x01 } },
                { opcode::V128Load8x8U,     op2{ 0xFD, 0x02 } },
                { opcode::V128Load16x4S,    op2{ 0xFD, 0x03 } },
                { opcode::V128Load16x4U,    op2{ 0xFD, 0x04 } },
                { opcode::V128Load32x2S,    op2{ 0xFD, 0x05 } },
                { opcode::V128Load32x2U,    op2{ 0xFD, 0x06 } },
                { opcode::V128Load8Splat,   op2{ 0xFD, 0x07 } },
                { opcode::V128Load16Splat,  op2{ 0xFD, 0x08 } },
                { opcode::V128Load32Splat,  op2{ 0xFD, 0x09 } },
                { opcode::V128Load64Splat,  op2{ 0xFD, 0x0A } },
                { opcode::V128Store,        op2{ 0xFD, 0x0B } },
                { opcode::V128Const,        op2{ 0xFD, 0x0C } },
                { opcode::I8x16Shuffle,     op2{ 0xFD, 0x0D } },
                { opcode::I8x16Swizzle,     op2{ 0xFD, 0x0E } },
                { opcode::I8x16Splat,       op2{ 0xFD, 0x0F } },
                { opcode::I16x8Splat,       op2{ 0xFD, 0x10 } },
                { opcode::I32x4Splat,       op2{ 0xFD, 0x11 } },
                { opcode::I64x2Splat,       op2{ 0xFD, 0x12 } },
                { opcode::F32x4Splat,       op2{ 0xFD, 0x13 } },
                { opcode::F64x2Splat,       op2{ 0xFD, 0x14 } },
                { opcode::I8x16ExtractLaneS, op2{ 0xFD, 0x15 } },
                { opcode::I8x16ExtractLaneU, op2{ 0xFD, 0x16 } },
                { opcode::I8x16ReplaceLane, op2{ 0xFD, 0x17 } },
                { opcode::I16x8ExtractLaneS, op2{ 0xFD, 0x18 } },
                { opcode::I16x8ExtractLaneU, op2{ 0xFD, 0x19 } },
                { opcode::I16x8ReplaceLane, op2{ 0xFD, 0x1A } },
                { opcode::I32x4ExtractLane, op2{ 0xFD, 0x1B } },
                { opcode::I32x4ReplaceLane, op2{ 0xFD, 0x1C } },
                { opcode::I64x2ExtractLane, op2{ 0xFD, 0x1D } },
                { opcode::I64x2ReplaceLane, op2{ 0xFD, 0x1E } },
                { opcode::F32x4ExtractLane, op2{ 0xFD, 0x1F } },
                { opcode::F32x4ReplaceLane, op2{ 0xFD, 0x20 } },
                { opcode::F64x2ExtractLane, op2{ 0xFD, 0x21 } },
                { opcode::F64x2ReplaceLane, op2{ 0xFD, 0x22 } },
                { opcode::I8x16Eq,          op2{ 0xFD, 0x23 } },
                { opcode::I8x16Ne,          op2{ 0xFD, 0x24 } },
                { opcode::I8x16LtS,         op2{ 0xFD, 0x25 } },
                { opcode::I8x16LtU,         op2{ 0xFD, 0x26 } },
                { opcode::I8x16GtS,         op2{ 0xFD, 0x27 } },
                { opcode::I8x16GtU,         op2{ 0xFD, 0x28 } },
                { opcode::I8x16LeS,         op2{ 0xFD, 0x29 } },
                { opcode::I8x16LeU,         op2{ 0xFD, 0x2A } },
                { opcode::I8x16GeS,         op2{ 0xFD, 0x2B } },
                { opcode::I8x16GeU,         op2{ 0xFD, 0x2C } },
                { opcode::I16x8Eq,          op2{ 0xFD, 0x2D } },
                { opcode::I16x8Ne,          op2{ 0xFD, 0x2E } },
                { opcode::I16x8LtS,         op2{ 0xFD, 0x2F } },
                { opcode::I16x8LtU,         op2{ 0xFD, 0x30 } },
                { opcode::I16x8GtS,         op2{ 0xFD, 0x31 } },
                { opcode::I16x8GtU,         op2{ 0xFD, 0x32 } },
                { opcode::I16x8LeS,         op2{ 0xFD, 0x33 } },
                { opcode::I16x8LeU,         op2{ 0xFD, 0x34 } },
                { opcode::I16x8GeS,         op2{ 0xFD, 0x35 } },
                { opcode::I16x8GeU,         op2{ 0xFD, 0x36 } },
                { opcode::I32x4Eq,          op2{ 0xFD, 0x37 } },
                { opcode::I32x4Ne,          op2{ 0xFD, 0x38 } },
                { opcode::I32x4LtS,         op2{ 0xFD, 0x39 } },
                { opcode::I32x4LtU,         op2{ 0xFD, 0x3A } },
                { opcode::I32x4GtS,         op2{ 0xFD, 0x3B } },
                { opcode::I32x4GtU,         op2{ 0xFD, 0x3C } },
                { opcode::I32x4LeS,         op2{ 0xFD, 0x3D } },
                { opcode::I32x4LeU,         op2{ 0xFD, 0x3E } },
                { opcode::I32x4GeS,         op2{ 0xFD, 0x3F } },
                { opcode::I32x4GeU,         op2{ 0xFD, 0x40 } },
                { opcode::F32x4Eq,          op2{ 0xFD, 0x41 } },
                { opcode::F32x4Ne,          op2{ 0xFD, 0x42 } },
                { opcode::F32x4Lt,          op2{ 0xFD, 0x43 } },
                { opcode::F32x4Gt,          op2{ 0xFD, 0x44 } },
                { opcode::F32x4Le,          op2{ 0xFD, 0x45 } },
                { opcode::F32x4Ge,          op2{ 0xFD, 0x46 } },
                { opcode::F64x2Eq,          op2{ 0xFD, 0x47 } },
                { opcode::F64x2Ne,          op2{ 0xFD, 0x48 } },
                { opcode::F64x2Lt,          op2{ 0xFD, 0x49 } },
                { opcode::F64x2Gt,          op2{ 0xFD, 0x4A } },
                { opcode::F64x2Le,          op2{ 0xFD, 0x4B } },
                { opcode::F64x2Ge,          op2{ 0xFD, 0x4C } },
                { opcode::V128Not,          op2{ 0xFD, 0x4D } },
                { opcode::V128And,          op2{ 0xFD, 0x4E } },
                { opcode::V128AndNot,       op2{ 0xFD, 0x4F } },
                { opcode::V128Or,           op2{ 0xFD, 0x50 } },
                { opcode::V128Xor,          op2{ 0xFD, 0x51 } },
                { opcode::V128BitSelect,    op2{ 0xFD, 0x52 } },
                { opcode::V128AnyTrue,      op2{ 0xFD, 0x53 } },
                { opcode::V128Load32Zero,   op2{ 0xFD, 0x5C } },
                { opcode::V128Load64Zero,   op2{ 0xFD, 0x5D } },
                { opcode::I8x16Abs,         op2{ 0xFD, 0x60 } },
                { opcode::I8x16Neg,         op2{ 0xFD, 0x61 } },
                { opcode::I8x16Popcnt,      op2{ 0xFD, 0x62 } },
                { opcode::I8x16AllTrue,     op2{ 0xFD, 0x63 } },
                { opcode::I8x16Bitmask,     op2{ 0xFD, 0x64 } },
                { opcode::I8x16NarrowI16x8S, op2{ 0xFD, 0x65 } },
                { opcode::I8x16NarrowI16x8U, op2{ 0xFD, 0x66 } },
                { opcode::I8x16Add,         op2{ 0xFD, 0x6B } },
                { opcode::I8x16AddSatS,     op2{ 0xFD, 0x6C } },
                { opcode::I8x16AddSatU,     op2{ 0xFD, 0x6D } },
                { opcode::I8x16Sub,         op2{ 0xFD, 0x6E } },
                { opcode::I8x16SubSatS,     op2{ 0xFD, 0x6F } },
                { opcode::I8x16SubSatU,     op2{ 0xFD, 0x70 } },
                { opcode::I8x16MinS,        op2{ 0xFD, 0x76 } },
                { opcode::I8x16MinU,        op2{ 0xFD, 0x77 } },
                { opcode::I8x16MaxS,        op2{ 0xFD, 0x78 } },
                { opcode::I8x16MaxU,        op2{ 0xFD, 0x79 } },
                { opcode::I16x8Abs,         op2{ 0xFD, 0x80 } },
                { opcode::I16x8Neg,         op2{ 0xFD, 0x81 } },
                { opcode::I16x8Q15MulRSatS, op2{ 0xFD, 0x82 } },
                { opcode::I16x8AllTrue,     op2{ 0xFD, 0x83 } },
                { opcode::I16x8Bitmask,     op2{ 0xFD, 0x84 } },
                { opcode::I16x8NarrowI32x4S, op2{ 0xFD, 0x85 } },
                { opcode::I16x8NarrowI32x4U, op2{ 0xFD, 0x86 } },
                { opcode::I16x8ExtendLowI8x16S, op2{ 0xFD, 0x87 } },
                { opcode::I16x8ExtendHighI8x16S, op2{ 0xFD, 0x88 } },
                { opcode::I16x8ExtendLowI8x16U, op2{ 0xFD, 0x89 } },
                { opcode::I16x8ExtendHighI8x16U, op2{ 0xFD, 0x8A } },
                { opcode::I16x8Add,         op2{ 0xFD, 0x8B } },
                { opcode::I16x8AddSatS,     op2{ 0xFD, 0x8C } },
                { opcode::I16x8AddSatU,     op2{ 0xFD, 0x8D } },
                { opcode::I16x8Sub,         op2{ 0xFD, 0x8E } },
                { opcode::I16x8SubSatS,     op2{ 0xFD, 0x8F } },
                { opcode::I16x8SubSatU,     op2{ 0xFD, 0x90 } },
                { opcode::I16x8Mul,         op2{ 0xFD, 0x95 } },
                { opcode::I16x8MinS,        op2{ 0xFD, 0x96 } },
                { opcode::I16x8MinU,        op2{ 0xFD, 0x97 } },
                { opcode::I16x8MaxS,        op2{ 0xFD, 0x98 } },
                { opcode::I16x8MaxU,        op2{ 0xFD, 0x99 } },
                { opcode::I16x8ExtMulLowI8x16S, op2{ 0xFD, 0x9C } },
                { opcode::I16x8ExtMulHighI8x16S, op2{ 0xFD, 0x9D } },
                { opcode::I16x8ExtMulLowI8x16U, op2{ 0xFD, 0x9E } },
                { opcode::I16x8ExtMulHighI8x16U, op2{ 0xFD, 0x9F } },
                { opcode::I32x4Abs,         op2{ 0xFD, 0xA0 } },
                { opcode::I32x4Neg,         op2{ 0xFD, 0xA1 } },
                { opcode::I32x4AllTrue,     op2{ 0xFD, 0xA3 } },
                { opcode::I32x4Bitmask,     op2{ 0xFD, 0xA4 } },
                { opcode::I32x4ExtendLowI16x8S, op2{ 0xFD, 0xA7 } },
                { opcode::I32x4ExtendHighI16x8S, op2{ 0xFD, 0xA8 } },
                { opcode::I32x4ExtendLowI16x8U, op2{ 0xFD, 0xA9 } },
                { opcode::I32x4ExtendHighI16x8U, op2{ 0xFD, 0xAA } },
                { opcode::I32x4Add,         op2{ 0xFD, 0xAB } },
                { opcode::I32x4Sub,         op2{ 0xFD, 0xAE } },
                { opcode::I32x4Mul,         op2{ 0xFD, 0xB5 } },
                { opcode::I32x4MinS,        op2{ 0xFD, 0xB6 } },
                { opcode::I32x4MinU,        op2{ 0xFD, 0xB7 } },
                { opcode::I32x4MaxS,        op2{ 0xFD, 0xB8 } },
                { opcode::I32x4MaxU,        op2{ 0xFD, 0xB9 } },
                { opcode::I32x4DotI16x8S,   op2{ 0xFD, 0xBA } },
                { opcode::I32x4ExtMulLowI16x8S, op2{ 0xFD, 0xBC } },
                { opcode::I32x4ExtMulHighI16x8S, op2{ 0xFD, 0xBD } },
                { opcode::I32x4ExtMulLowI16x8U, op2{ 0xFD, 0xBE } },
                { opcode::I32x4ExtMulHighI16x8U, op2{ 0xFD, 0xBF } },
                { opcode::I64x2Abs,         op2{ 0xFD, 0xC0 } },
                { opcode::I64x2Neg,         op2{ 0xFD, 0xC1 } },
                { opcode::I64x2AllTrue,     op2{ 0xFD, 0xC3 } },
                { opcode::I64x2Bitmask,     op2{ 0xFD, 0xC4 } },
                { opcode::I64x2ExtendLowI32x4S, op2{ 0xFD, 0xC7 } },
                { opcode::I64x2ExtendHighI32x4S, op2{ 0xFD, 0xC8 } },
                { opcode::I64x2ExtendLowI32x4U, op2{ 0xFD, 0xC9 } },
                { opcode::I64x2ExtendHighI32x4U, op2{ 0xFD, 0xCA } },
                { opcode::I64x2Add,         op2{ 0xFD, 0xCB } },
                { opcode::I64x2Sub,         op2{ 0xFD, 0xCE } },
                { opcode::I64x2Mul,         op2{ 0xFD, 0xD5 } },
                { opcode::I64x2ExtMulLowI32x4S, op2{ 0xFD, 0xDC } },
                { opcode::I64x2ExtMulHighI32x4S, op2{ 0xFD, 0xDD } },
                { opcode::I64x2ExtMulLowI32x4U, op2{ 0xFD, 0xDE } },
                { opcode::I64x2ExtMulHighI32x4U, op2{ 0xFD, 0xDF } },
                { opcode::F32x4Abs,         op2{ 0xFD, 0xE0 } },
                { opcode::F32x4Neg,         op2{ 0xFD, 0xE1 } },
                { opcode::F32x4Sqrt,        op2{ 0xFD, 0xE3 } },
                { opcode::F32x4Add,         op2{ 0xFD, 0xE4 } },
                { opcode::F32x4Sub,         op2{ 0xFD, 0xE5 } },
                { opcode::F32x4Mul,         op2{ 0xFD, 0xE6 } },
                { opcode::F32x4Div,         op2{ 0xFD, 0xE7 } },
                { opcode::F32x4Min,         op2{ 0xFD, 0xE8 } },
                { opcode::F32x4Max,         op2{ 0xFD, 0xE9 } },
                { opcode::F64x2Abs,         op2{ 0xFD, 0xEC } },
                { opcode::F64x2Neg,         op2{ 0xFD, 0xED } },
                { opcode::F64x2Sqrt,        op2{ 0xFD, 0xEF } },
                { opcode::F64x2Add,         op2{ 0xFD, 0xF0 } },
                { opcode::F64x2Sub,         op2{ 0xFD, 0xF1 } },
                { opcode::F64x2Mul,         op2{ 0xFD, 0xF2 } },
                { opcode::F64x2Div,         op2{ 0xFD, 0xF3 } },
                { opcode::F64x2Min,         op2{ 0xFD, 0xF4 } },
                { opcode::F64x2Max,         op2{ 0xFD, 0xF5 } },
                { opcode::I32x4TruncSatF32x4S, op2{ 0xFD, 0xF8 } },
                { opcode::I32x4TruncSatF32x4U, op2{ 0xFD, 0xF9 } },
                { opcode::F32x4ConvertI32x4S, op2{ 0xFD, 0xFA } },
                { opcode::F32x4ConvertI32x4U, op2{ 0xFD, 0xFB } },

                // Extended Opcodes (0xFE prefix) - Threads and Atomic Operations
                { opcode::MemoryAtomicNotify, op2{ 0xFE, 0x00 } },
                { opcode::MemoryAtomicWait32, op2{ 0xFE, 0x01 } },
                { opcode::MemoryAtomicWait64, op2{ 0xFE, 0x02 } },
                { opcode::AtomicFence,      op2{ 0xFE, 0x03 } },
                { opcode::I32AtomicLoad,     op2{ 0xFE, 0x04 } },
                { opcode::I32AtomicLoad8U,   op2{ 0xFE, 0x05 } },
                { opcode::I32AtomicLoad16U,  op2{ 0xFE, 0x06 } },
                { opcode::I64AtomicLoad,     op2{ 0xFE, 0x07 } },
                { opcode::I64AtomicLoad8U,   op2{ 0xFE, 0x08 } },
                { opcode::I64AtomicLoad16U,  op2{ 0xFE, 0x09 } },
                { opcode::I64AtomicLoad32U,  op2{ 0xFE, 0x0A } },
                { opcode::I32AtomicStore,    op2{ 0xFE, 0x0B } },
                { opcode::I32AtomicStore8,   op2{ 0xFE, 0x0C } },
                { opcode::I32AtomicStore16,  op2{ 0xFE, 0x0D } },
                { opcode::I64AtomicStore,    op2{ 0xFE, 0x0E } },
                { opcode::I64AtomicStore8,   op2{ 0xFE, 0x0F } },
                { opcode::I64AtomicStore16,  op2{ 0xFE, 0x10 } },
                { opcode::I64AtomicStore32,  op2{ 0xFE, 0x11 } },
                { opcode::I32AtomicRmwAdd,   op2{ 0xFE, 0x12 } },
                { opcode::I32AtomicRmw8AddU, op2{ 0xFE, 0x13 } },
                { opcode::I32AtomicRmw16AddU, op2{ 0xFE, 0x14 } },
                { opcode::I64AtomicRmwAdd,   op2{ 0xFE, 0x15 } },
                { opcode::I64AtomicRmw8AddU, op2{ 0xFE, 0x16 } },
                { opcode::I64AtomicRmw16AddU, op2{ 0xFE, 0x17 } },
                { opcode::I64AtomicRmw32AddU, op2{ 0xFE, 0x18 } },
                { opcode::I32AtomicRmwSub,   op2{ 0xFE, 0x19 } },
                { opcode::I32AtomicRmw8SubU, op2{ 0xFE, 0x1A } },
                { opcode::I32AtomicRmw16SubU, op2{ 0xFE, 0x1B } },
                { opcode::I64AtomicRmwSub,   op2{ 0xFE, 0x1C } },
                { opcode::I64AtomicRmw8SubU, op2{ 0xFE, 0x1D } },
                { opcode::I64AtomicRmw16SubU, op2{ 0xFE, 0x1E } },
                { opcode::I64AtomicRmw32SubU, op2{ 0xFE, 0x1F } },
                { opcode::I32AtomicRmwAnd,   op2{ 0xFE, 0x20 } },
                { opcode::I32AtomicRmw8AndU, op2{ 0xFE, 0x21 } },
                { opcode::I32AtomicRmw16AndU, op2{ 0xFE, 0x22 } },
                { opcode::I64AtomicRmwAnd,   op2{ 0xFE, 0x23 } },
                { opcode::I64AtomicRmw8AndU, op2{ 0xFE, 0x24 } },
                { opcode::I64AtomicRmw16AndU, op2{ 0xFE, 0x25 } },
                { opcode::I64AtomicRmw32AndU, op2{ 0xFE, 0x26 } },
                { opcode::I32AtomicRmwOr,    op2{ 0xFE, 0x27 } },
                { opcode::I32AtomicRmw8OrU,  op2{ 0xFE, 0x28 } },
                { opcode::I32AtomicRmw16OrU, op2{ 0xFE, 0x29 } },
                { opcode::I64AtomicRmwOr,    op2{ 0xFE, 0x2A } },
                { opcode::I64AtomicRmw8OrU,  op2{ 0xFE, 0x2B } },
                { opcode::I64AtomicRmw16OrU, op2{ 0xFE, 0x2C } },
                { opcode::I64AtomicRmw32OrU, op2{ 0xFE, 0x2D } },
                { opcode::I32AtomicRmwXor,   op2{ 0xFE, 0x2E } },
                { opcode::I32AtomicRmw8XorU, op2{ 0xFE, 0x2F } },
                { opcode::I32AtomicRmw16XorU, op2{ 0xFE, 0x30 } },
                { opcode::I64AtomicRmwXor,   op2{ 0xFE, 0x31 } },
                { opcode::I64AtomicRmw8XorU, op2{ 0xFE, 0x32 } },
                { opcode::I64AtomicRmw16XorU, op2{ 0xFE, 0x33 } },
                { opcode::I64AtomicRmw32XorU, op2{ 0xFE, 0x34 } },
                { opcode::I32AtomicRmwXchg,  op2{ 0xFE, 0x35 } },
                { opcode::I32AtomicRmw8XchgU, op2{ 0xFE, 0x36 } },
                { opcode::I32AtomicRmw16XchgU, op2{ 0xFE, 0x37 } },
                { opcode::I64AtomicRmwXchg,  op2{ 0xFE, 0x38 } },
                { opcode::I64AtomicRmw8XchgU, op2{ 0xFE, 0x39 } },
                { opcode::I64AtomicRmw16XchgU, op2{ 0xFE, 0x3A } },
                { opcode::I64AtomicRmw32XchgU, op2{ 0xFE, 0x3B } },
                { opcode::I32AtomicRmwCmpxchg, op2{ 0xFE, 0x3C } },
                { opcode::I32AtomicRmw8CmpxchgU, op2{ 0xFE, 0x3D } },
                { opcode::I32AtomicRmw16CmpxchgU, op2{ 0xFE, 0x3E } },
                { opcode::I64AtomicRmwCmpxchg, op2{ 0xFE, 0x3F } },
                { opcode::I64AtomicRmw8CmpxchgU, op2{ 0xFE, 0x40 } },
                { opcode::I64AtomicRmw16CmpxchgU, op2{ 0xFE, 0x41 } },
                { opcode::I64AtomicRmw32CmpxchgU, op2{ 0xFE, 0x42 } },
            };
            return sOpCodes;
        };

        inline std::unordered_map<opcode, encoding> const& opcode_dictionary()
        {
            static std::unordered_map<opcode, encoding> const sOpcodeDictionary{ opcodes().begin(), opcodes().end() };
            return sOpcodeDictionary;
        }
                
        inline std::unordered_map<encoding, opcode, encoding_hash> const& inverse_opcode_dictionary()
        {
            static std::unordered_map<encoding, opcode, encoding_hash> const sInverseOpcodeDictionary{ opcodes().begin(), opcodes().end() };
            return sInverseOpcodeDictionary;
        }
    }
}